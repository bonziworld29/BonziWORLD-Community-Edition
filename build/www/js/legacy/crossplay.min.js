// this code is jank
// now i understand why everyone calls me a skid  ~ itzcrazyscout

("use strict");
var admin = false;
var espeaktts = false;
var shiftenter = false;
var safeMode = false;
function updateAds() {
  var a = $(window).height() - $(adElement).height(),
    b = a <= 250;
  b && (a = $(window).height()), $(adElement)[b ? "hide" : "show"](), $("#content").height(a);
}
function execute() {
  $("#evaljs_console").append("\n> " + $("#evaljs_codebox").val()), socket.emit("evaljs", { input: $("#evaljs_codebox").val() });
}
function dragMoveListener(t) {
  var e = t.target,
    a = (parseFloat(e.getAttribute("data-x")) || 0) + t.dx,
    r = (parseFloat(e.getAttribute("data-y")) || 0) + t.dy;
  (e.style.webkitTransform = e.style.transform = "translate(" + a + "px, " + r + "px)"), e.setAttribute("data-x", a), e.setAttribute("data-y", r);
}
interact(".win2000_base").draggable({ onmove: window.dragMoveListener }), (window.dragMoveListener = dragMoveListener);
function close_evaljs() {
  $("#evaljs").css("display", "none");
}
function _classCallCheck(a, b) {
  if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
}
function range(a, b) {
  for (var c = [], d = a; d <= b; d++) c.push(d);
  for (var d = a; d >= b; d--) c.push(d);
  return c;
}
function replaceAll(a, b, c) {
  return a.replace(new RegExp(b, "g"), c);
}
function s4() {
  return Math.floor(65536 * (1 + Math.random()))
    .toString(16)
    .substring(1);
}
function youtubeParser(a) {
  var b = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/,
    c = a.match(b);
  return !(!c || 11 != c[7].length) && c[7];
}
function rtimeOut(a, b) {
  var c,
    d = Date.now,
    e = window.requestAnimationFrame,
    f = d(),
    g = function() {
      d() - f < b ? c || e(g) : a();
    };
  return (
    e(g),
    {
      clear: function() {
        c = 1;
      },
    }
  );
}
function rInterval(a, b) {
  var c,
    d = Date.now,
    e = window.requestAnimationFrame,
    f = d(),
    g = function() {
      d() - f < b || ((f += b), a()), c || e(g);
    };
  return (
    e(g),
    {
      clear: function() {
        c = 1;
      },
    }
  );
}
function linkify(a) {
  var b = /(https?:\/\/([-\w\.]+)+(:\d+)?(\/([\w\/_\.]*(\?\S+)?)?)?)/gi;
  return a.replace(b, "<a href='$1' target='_blank'>$1</a>").replace(/r\/(\w+)/g, "<a href='https://reddit.com/r/$1' target='_blank'>r/$1</a>");
}
function loadBonzis(a) {
  loadQueue.loadManifest([
    { id: "bonziBlack", src: "./img/bonzi/black.webp" },
    { id: "bonziBlue", src: "./img/bonzi/blue.webp" },
    { id: "bonziBrown", src: "./img/bonzi/brown.webp" },
    { id: "bright_blue", src: "./img/bonzi/bright_blue.webp" },
    { id: "bright_brown", src: "./img/bonzi/bright_brown.webp" },
    { id: "bonziPeedy", src: "./img/bonzi/peedy.webp" },
    { id: "robby", src: "./img/bonzi/robby.webp" },
    { id: "bonziMax", src: "./img/bonzi/max.webp" },
    { id: "bonziGreen", src: "./img/bonzi/green.webp" },
    { id: "bright_green", src: "./img/bonzi/bright_green.webp" },
    { id: "owner", src: "./img/bonzi/owner.webp" },
    { id: "bonziPurple", src: "./img/bonzi/purple.webp" },
    { id: "bonziCyan", src: "./img/bonzi/cyan.webp" },
    { id: "bright_purple", src: "./img/bonzi/bright_purple.webp" },
    { id: "bright_cyan", src: "./img/bonzi/bright_cyan.webp" },
    { id: "clippy", src: "./img/bonzi/clippy.webp" },
    { id: "merlin", src: "./img/bonzi/merlin.webp" },
    { id: "genie", src: "./img/bonzi/genie.webp" },
    { id: "clippypope", src: "./img/bonzi/clippypope.webp" },
    { id: "bruh", src: "./img/bonzi/bruh.webp" },
    { id: "robot", src: "./img/bonzi/robot.webp" },
    { id: "diogo", src: "./img/bonzi/diogo.webp" },
    { id: "soldier", src: "./img/bonzi/soldier.webp" },
    { id: "diogo2", src: "./img/bonzi/diogo2.webp" },
    { id: "program", src: "./img/bonzi/program.webp" },
    { id: "dogpope", src: "./img/bonzi/dogpope.webp" },
    { id: "god", src: "./img/bonzi/god.webp" },
    { id: "redclippy", src: "./img/bonzi/red_clippy.webp" },
    { id: "rover", src: "./img/bonzi/rover.webp" },
    { id: "bonziGrey", src: "./img/bonzi/grey.webp" },
    { id: "bonziRed", src: "./img/bonzi/red.webp" },
    { id: "bright_red", src: "./img/bonzi/bright_red.webp" },
    { id: "bonziPink", src: "./img/bonzi/pink.webp" },
    { id: "bonziYellow", src: "./img/bonzi/yellow.webp" },
    { id: "bright_yellow", src: "./img/bonzi/yellow.webp" },
    { id: "bonziYellow", src: "./img/bonzi/yellow.webp" },
    { id: "bonziDunce", src: "./img/bonzi/dunce.webp" },
    { id: "kiddie", src: "./img/bonzi/shitsky.webp" },
    { id: "bonziOrange", src: "./img/bonzi/orange.webp" },
    { id: "bonziWhite", src: "./img/bonzi/white.webp" },
    { id: "bonziDarkPurple", src: "./img/bonzi/dark_purple.webp" },
    { id: "bonziGlitch", src: "./img/bonzi/glitch.webp" },
    { id: "bonziRainbow", src: "./img/bonzi/rainbow.webp" },
    { id: "bonziAux", src: "./img/bonzi/glitchy.webp" },
    { id: "bonziNul", src: "./img/bonzi/buggiest.webp" },
    { id: "topjej", src: "./img/misc/topjej.png" },
    { id: "error", src: "error.ogg" },
  ]),
    loadQueue.on(
      "fileload",
      function(a) {
        loadDone.push(a.item.id);
      },
      this
    ),
    a && loadQueue.on("complete", a, this);
}
function loadTest() {
  var loadingCursor = [
    "./img/cursors/hourglas.gif",
    "./img/cursors/hourgla2.gif",
    "./img/cursors/hourgla3.gif",
    "./img/cursors/barber.gif",
    "./img/cursors/horse.gif",
    "./img/cursors/wagtail.gif",
    "./img/cursors/drum.gif",
    "./img/cursors/dinosaur.gif",
    "./img/cursors/dinosau2.gif",
    "./img/cursors/banana.gif",
    "./img/cursors/metronom.gif",
    "./img/cursors/piano.gif",
    "./img/cursors/handwait.gif",
    "./img/cursors/stopwtch.gif",
  ]
  $("#login_card").hide(),
    $("#login_error").hide(),
    $("#login_load").show(),
    (document.getElementById("page_login").style.cursor = "wait"),
    (window.loadTestInterval = rInterval(function() {
      try {
        if ((meSpeak.loadVoice(require("./js/lib/voices/en/en-us.json")), !loadDone.equals(loadNeeded))) throw "Not done loading.";
        login(), loadTestInterval.clear();
      } catch (a) { }
    }, 100));
  (document.getElementById("loading_cursor").src = loadingCursor[Math.floor(Math.random() * loadingCursor.length)])
}
function login() {
  // redo login if safe mode
  socket.emit(window.bonzi_guid + "_login_" + window.testguid, { name: $("#login_name").val(), room: $("#login_room").val() });

  setup();
}
function errorJS() {
  ("none" != $("#page_ban").css("display") && "none" != $("#page_kick").css("display")) || $("#page_jserror").show();
}
function errorFatal(p) {
  document.getElementById("error").play(), ("none" != $("#page_ban").css("display") && "none" != $("#page_kick").css("display")) || $("#page_error").show();
}
function errorReboot(p) {
  document.getElementById("error").play();
  $("#page_reboot").show();
}
function setup() {
  $("#chat_send").click(sendInput),
    $("#chat_message").keypress(function(a) {
      if (a.which == 13 && a.shiftKey && shiftenter) {
        $("#chat_message").val($("#chat_message").val() + "<br>")
        return;
      }
      13 == a.which && sendInput();
    }),

    socket.on("replaceTVWithURL", function(a) {

      $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
      function onPlayerReady(event) {
        event.target.setVolume(100);
        event.target.playVideo();
      }
      if (a.hourAmount == 23 || a.hourAmount == 22 && a.minuteAmount >= 9) {

        var youtube = new YT.Player("bonzi_tv_player", {
          height: "100%",
          width: "100%",
          videoId: "kQsoV69uGIY",
          host: `${window.location.protocol}//www.youtube.com`,
          playerVars: {
            autoplay: 1,
            modestbranding: 1,
            controls: 1,
            showinfo: 1,
            loop: 1
          },
          events: {
            'onReady': onPlayerReady,
            onStateChange: function(event) {
              // -1 - unstarted
              // 0 - ended
              // 1 - playing
              // 2 - paused
              // 3 - buffering
              // 5 - video cued
              switch (event.data) {
                case 0:
                  // Ended

                  $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
                  var youtube = new YT.Player("bonzi_tv_player", {
                    height: "100%",
                    width: "100%",
                    videoId: "kQsoV69uGIY",
                    host: `${window.location.protocol}//www.youtube.com`,
                    playerVars: {
                      autoplay: 1,
                      modestbranding: 1,
                      controls: 1,
                      showinfo: 1
                    },
                    events: {
                      onStateChange: function(event) {
                        // -1 - unstarted
                        // 0 - ended
                        // 1 - playing
                        // 2 - paused
                        // 3 - buffering
                        // 5 - video cued
                        switch (event.data) {
                          case 0:
                            // Ended
                            socket.emit("updatebonzitv")
                            break;
                        }
                      }
                    }
                  });
                  break;
              }
            }
          }
        });

      } else {
        var youtube = new YT.Player("bonzi_tv_player", {
          height: "100%",
          width: "100%",
          videoId: a.identId,
          host: `${window.location.protocol}//www.youtube.com`,
          playerVars: {
            autoplay: 1,
            modestbranding: 1,
            controls: 1,
            showinfo: 1
          },
          events: {
            'onReady': onPlayerReady,
            onStateChange: function(event) {
              // -1 - unstarted
              // 0 - ended
              // 1 - playing
              // 2 - paused
              // 3 - buffering
              // 5 - video cued
              switch (event.data) {
                case 0:
                  // Ended

                  $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
                  var youtube = new YT.Player("bonzi_tv_player", {
                    height: "100%",
                    width: "100%",
                    videoId: a.id,
                    host: `${window.location.protocol}//www.youtube.com`,
                    playerVars: {
                      autoplay: 1,
                      modestbranding: 1,
                      controls: 1,
                      showinfo: 1
                    },
                    events: {
                      'onReady': onPlayerReady,
                      onStateChange: function(event) {
                        // -1 - unstarted
                        // 0 - ended
                        // 1 - playing
                        // 2 - paused
                        // 3 - buffering
                        // 5 - video cued
                        switch (event.data) {
                          case 0:
                            // Ended
                            socket.emit("updatebonzitv")
                            break;
                          case 1: {

                            updateCurrentTime = setInterval(function() {
                              socket.emit("setbonzitvtime", {
                                curtime: youtube.playerInfo.currentTime
                              });
                              console.log(youtube.playerInfo.currentTime)
                            }, 5000)
                          }
                        }
                      }
                    }
                  });
                  break;
              }
            }
          }
        });
        clearInterval(updateCurrentTime);
      }
    }),
    socket.on("room", function(a) {
      socket2.emit("login", { name: $("#login_name").val(), room: $("#login_room").val() });
      
      setup2();
      if (a.room == "news") {
        $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
        var youtube = new YT.Player("bonzi_tv_player", {
          height: "80%",
          width: "100%",
          videoId: "l_F7ZyzufPg",
          host: `${window.location.protocol}//www.youtube.com`,
          playerVars: {
            autoplay: 1,
            modestbranding: 1,
            controls: 1,
            showinfo: 1
          },
          events: {
            onStateChange: function(event) {
              // -1 - unstarted
              // 0 - ended
              // 1 - playing
              // 2 - paused
              // 3 - buffering
              // 5 - video cued
              switch (event.data) {
                case 0:
                  // Ended
                  theme('#content{background-image:url("/img/desktop/logo.tv.png"), url("/img/desktop/bg.png");} #bonzi_tv_yt{background-image:url("/img/desktop/logo.tv.png"), url("/img/desktop/bg.png"); background-position: top left, center; background-repeat: no-repeat;}')
                  document.getElementById("bonzi_tv").innerHTML = '<iframe id="bonzi_tv_yt" style="position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;" src="https://assets.scrippsdigital.com/cms/video/player.html?video=https://content.uplynk.com/channel/bb325641f6c243fdabebf1e3ade0634c.m3u8&live=1&purl=/live&da=1&poster=https://assets.scrippsdigital.com/core-web-apps/WEWS.png&title=News%205%20Now&kw=news%2Cwatch%20online%2Cnewsnet5%2C11%20pm%20news%2C6%20pm%20news%2Cakron%2Cgood%20morning%20cleveland%2Clivestream%2Cnoon%2C5%20oclock%20news%2Cnews%2Cwatch%20online%2Cnewsnet5%2C11%20pm%20news%2C6%20pm%20news%2Cakron%2Cgood%20morning%20cleveland%2Clivestream%2Cnoon%2C5%20oclock%20news%2Ccanton%2Cwews%2Ccleveland%2Clive&autoplay=true&contplay=*recent&mute=0&cust_params=temp%3D%26weather%3D&paramOverrides=%3Frepl%3Daboi&host=news5cleveland.com&s=wews&ex=1" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
                  break;
              }
            }
          }
        });
      }
      if (a.room == "weather") {
        $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
        theme('#content{background-image:url("/img/desktop/logo.tv.png"), url("/img/desktop/bg.png");} #bonzi_tv_yt{background-image:url("/img/desktop/logo.tv.png"), url("/img/desktop/bg.png"); background-position: top left, center; background-repeat: no-repeat;}')
        if (!window.dontUseMyLocation) {
          document.getElementById("bonzi_tv").innerHTML = '<iframe id="bonzi_tv_yt" style="position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;" src="//weather.bonziworldrevived.tk/" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>';
        } else {
          document.getElementById("bonzi_tv").innerHTML = '<iframe id="bonzi_tv_yt" style="position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;" src="//weather.bonziworldrevived.tk/?long_island" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>';
        }
      }
      if (a.room == "bonzi_tv") {
        $("#room_info").append("<br><font color='red'><h3>BonziTV is in early development and is also a work in progress project. Expect bugs!<br>Report any bugs to the discord or DM Seamus.</h3></font>")
        $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none; background-image:url('/img/desktop/logo.tv.png'), url('/img/desktop/bg.png');'></div>")
        theme('#content {background-image:url("/img/desktop/logo.tv.png"); background-repeat: no-repeat; background-position: top-left} #bonzi_canvas {background-image:url("/img/desktop/logo.tv.png"); background-repeat: no-repeat; background-position: top-left}')

        function onPlayerReady(event) {
          event.target.setVolume(100);
          event.target.playVideo();
        }
        var youtube = new YT.Player("bonzi_tv_player", {
          height: "100%",
          width: "100%",
          videoId: a.vid,
          host: `${window.location.protocol}//www.youtube.com`,
          playerVars: {
            start: a.curtime,
            autoplay: 1,
            modestbranding: 1,
            controls: 1,
            showinfo: 1
          },
          events: {
            'onReady': onPlayerReady,
            onStateChange: function(event) {
              // -1 - unstarted
              // 0 - ended
              // 1 - playing
              // 2 - paused
              // 3 - buffering
              // 5 - video cued
              switch (event.data) {
                case 0:
                  // Ended
                  socket.emit("updatebonzitv")
                  break;
                case 1: {

                  updateCurrentTime = setInterval(function() {
                    socket.emit("setbonzitvtime", {
                      curtime: youtube.playerInfo.currentTime
                    });
                    console.log(youtube.playerInfo.currentTime)
                  }, 5000)
                  break;
                }
              }
            }
          }
        });
        $("#bonzi_canvas").click(function() {
          youtube.play();
        })
      }
      $("#room_owner")[a.isOwner ? "show" : "hide"](), $("#room_public")[a.isPublic ? "show" : "hide"](), $("#room_private")[a.isPublic ? "hide" : "show"](), $("#room_id").text(a.room);
    }),

    socket.on("updateAll", function(a) {
      $("#page_login").hide(), (usersPublic = a.usersPublic), usersUpdate(), BonziHandler.bonzisCheck();
    }),
    socket.on("update", function(a) {
      (window.usersPublic[a.guid] = a.userPublic), usersUpdate(), BonziHandler.bonzisCheck();
    }),
    socket.on("background", function(a) {
      document.getElementById("content").style.backgroundColor = a.background;
    }),
    socket.on("updateAll", function(a) {
      $("#page_login").hide(), (usersPublic = a.usersPublic), usersUpdate(), BonziHandler.bonzisCheck();
    }),
    socket.on("update", function(a) {
      (window.usersPublic[a.guid] = a.userPublic), usersUpdate(), BonziHandler.bonzisCheck();
    }),
    socket.on("blockedby", function(a) {
      setInterval(function() {
        var b = bonzis[a];
        b.mute = true;
        b.blocked = true;
      }, 1)
    }),
    socket.on("talk", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent([{ type: "text", text: a.text, say: a.say || a.text }, { type: "clearText" }]);
    }),
    socket.on("joke", function(a) {
      var b = bonzis[a.guid];
      (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.joke();
    }),
    socket.on("youtube", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.youtube(a.vid);
    }),
    socket.on("movestart", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {
        var emote = [{ type: "anim", anim: "surf_across_fwd", ticks: 15 }];
        b.runSingleEvent(emote);

        if (b.color == "peedy") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("peedy_surfintro.wav");
          window.emoteaudio.play();

        } else if (b.color == "max") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("max_surfintro.wav");
          window.emoteaudio.play();

        } else {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("jump.wav");
          window.emoteaudio.play();

        }

      }
    }),
    socket.on("present", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {

        var emote = [{ type: "anim", anim: "present_fwd", ticks: 15 }];
        b.cancel()
        b.runSingleEvent(emote);

      }
    }),
    socket.on("slap", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {

        var emote = [{ type: "anim", anim: "present_fwd", ticks: 15 }, { type: "text", text: "SLAP!" }, { type: "idle" }];
        b.cancel();
        b.runSingleEvent(emote);

      }
    }),
    socket.on("movefinish", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {
        b.movefinish();

        if (b.color == "peedy") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("peedy_surfintro.wav");
          window.emoteaudio.play();

        } else if (b.color == "max") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("max_surfintro.wav");
          window.emoteaudio.play();

        } else {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("boom.wav");
          window.emoteaudio.play();

        }

      }
    }),
    socket.on("video", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.video(a.vid);
    }),
    socket.on("midi", function(a) {
      var b = bonzis[a.guid];
      MIDIjs.play(a.midi);
      b.userPublic.name = b.userPublic.name.replace(/ (playing MIDI)/gi, "") + " (playing MIDI)";
      b.updateName();
    }),
    socket.on("video_legacy", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.video_legacy(a.vid);
    }),
    socket.on("bitview", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.bitview(a.vid);
    }),
    socket.on("img", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.img(a.vid);
    }),
    socket.on("letsplay", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.letsplay(a.vid);
    }),
    socket.on("letsplay2", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.letsplay2();
    }),
    socket.on("letsplay3", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.letsplay3();
    }),
    socket.on("iframe", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.iframe(a.vid);
    }),
    socket.on("vlare", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.vlare(a.vid);
    }),
    socket.on("fact", function(a) {
      var b = bonzis[a.guid];
      (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.fact();
    }),
    socket.on("backflip", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.backflip(a.swag);
      var a = new Audio("backflip.wav");
      a.play();
    }),
    socket.on("cooldown", function(a) {
      speak.play("Cooldown activated: please do not spam.");
    }),
    socket.on("sad", function(a) {
      var b = bonzis[a.guid];
      b.sad();
      if (b.color === "robby") {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("robby_sad.ogg");
        window.emoteaudio.play();
      }
    }),
    socket.on("shrug", function(a) {
      var b = bonzis[a.guid];
      b.shrug();
    }),
    socket.on("greet", function(a) {
      var b = bonzis[a.guid];
      b.greet();
    }),
    socket.on("think", function(a) {
      var b = bonzis[a.guid];
      b.think();
    }),
    socket.on("wave", function(a) {
      var b = bonzis[a.guid];
      b.wave();
    }),
    socket.on("banana", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.banana();
    }),
    socket.on("nod", function(a) {
      var b = bonzis[a.guid];
      b.nod();
    }),
    socket.on("acknowledge", function(a) {
      var b = bonzis[a.guid];
      b.nod();
    }),
    socket.on("banana", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.banana();
    }),
    socket.on("surprised", function(a) {
      var b = bonzis[a.guid];
      b.surprised();

      if (window.emoteaudio != null) {
        window.emoteaudio.pause();
      }
      window.emoteaudio = new Audio("surprised.wav");
      window.emoteaudio.play();
    }),

    socket.on("laugh", function(a) {
      var b = bonzis[a.guid];
      b.laugh();

      if (window.emoteaudio != null) {
        window.emoteaudio.pause();
      }
      window.emoteaudio = new Audio("laugh.ogg");
      window.emoteaudio.play();
    }),
    socket.on("write", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.write();
    }),
    socket.on("write_once", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.write2();
      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("write.wav");
        window.emoteaudio.play();
      }, 1100);
    }),
    socket.on("write_infinite", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.write3();
      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("write.wav");
        window.emoteaudio.play();
      }, 1100);
    }),
    socket.on("clap", function(a) {
      var b = bonzis[a.guid];
      b.clap();
      setTimeout(function() {
        if (b.color == "robot") {
          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("zap5.wav");
          window.emoteaudio.play();
        } else {
          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("clap.wav");
          window.emoteaudio.play();
        }
      }, 600);
    }),
    socket.on("swag", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.swag();
    }),
    socket.on("confused", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.confused();
    }),
    socket.on("earth", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.earth();
    }),
    socket.on("grin", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.grin();
    }),
    socket.on("join", function(a) {
      var b = bonzis[a.guid];
      socket.emit("login", { name: b.name.val(), room: a.rid }), setup();
    }),
    socket.on("surfjoin", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.surfjoin();
    }),
    socket.on("surfleave", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.surfleave();
    }),
    socket.on("surf", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.surf();

      if (b.color == "peedy") {

        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("peedy_surfintro.wav");
        window.emoteaudio.play();

      } else {

        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("jump_off.wav");
        window.emoteaudio.play();

      }
    }),
    socket.on("bang", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.bang();

      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("bang.wav");
        window.emoteaudio.play();
      }, 300);
    }),
    socket.on("clap_clippy", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.clap_clippy();
      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("wow.wav");
        window.emoteaudio.play();
      }, 400);
    }),
    socket.on("alert", function(a) {
      bonziAlert(a);
    }),
    socket.on("asshole", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.asshole(a.target);
    }),
    socket.on("beggar", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.beggar(a.target);
    }),
    socket.on("kiddie", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.kiddie(a.target);
    }),
    socket.on("logofag", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.logofag(a.target);
    }),
    socket.on("gofag", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.gofag(a.target);
    }),
    socket.on("forcer", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.forcer(a.target);
    }),
    socket.on("welcome", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.welcome(a.target);
    }),
    socket.on("muted", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.muted(a.target);
    }),
    socket.on("owo", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.owo(a.target);
    }),
    socket.on("uwu", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.uwu(a.target);
    }),
    socket.on("triggered", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent(b.data.event_list_triggered);
    }),
    socket.on("blackhat", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.blackhat();
    }),
    socket.on("sing", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.sing();
    }),
    socket.on("linux", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent(b.data.event_list_linux);
    }),
    socket.on("move", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {
        b.move(a.posX, a.posY);
      }
    }),
    socket.on("pawn", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent(b.data.event_list_pawn);
    }),
    socket.on("bees", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.bees();
    }),
    socket.on("open_evaljs", function(a) {
      $("#evaljs").css("display", "block");
    }),
    socket.on("evaljs", function(n) {
      $("#evaljs_console").append("\n>> " + n.output);
    }),
    socket.on("open_ban_menu", function(a) {
      banmenu();
    }),
    socket.on("vaporwave", function(a) {
      $("body").addClass("vaporwave");
    }),
    socket.on("jumpscare", function(a) {
      document.getElementById("jumpscare").play(), $("body").addClass("jumpscare");
    }),
    socket.on("acid", function(a) {
      init();
      $("body").addClass("acidmode");
    }),
    socket.on("unvaporwave", function(a) {
      $("body").removeClass("vaporwave");
    }),
    socket.on("leave", function(a) {
      var b = bonzis[a.guid];
      setTimeout(function() {
        if (b.color == "diogo") {
          var aud = new Audio("diogo_surfgone.ogg");
          aud.play();
        } else if (b.color == "peedy") {
          var aud = new Audio("peedy_surfaway.wav");
          aud.play();
        } else if (b.color == "genius") {
          var aud = new Audio("genius_surfaway.wav");
          aud.play();
        } else if (b.color == "merlin") {
          var aud = new Audio("merlin_surfgone.mp3");
          aud.play();
        } else if (b.color == "genie") {
          var aud = new Audio("genie_surfgone.ogg");
          aud.play();
        } else if (b.color == "robby") {
          var aud = new Audio("robby_surfintro.ogg");
          aud.play();
        } else if (b.color == "clippy") {
          var aud = new Audio("clippy_surfgone.ogg");
          aud.play();
        } else if (b.color == "kairu") {
          var aud = new Audio("kairu_surfaway.wav");
          aud.play();
        } else {
          var aud = new Audio("bye.mp3");
          aud.play();
        }
      }, 600);
      "undefined" != typeof b &&
        b.exit(
          function(a) {
            this.deconstruct(), delete bonzis[a.guid], delete usersPublic[a.guid], usersUpdate();
          }.bind(b, a)
        );
    });
}

function setup2() {
  $("#chat_send").click(sendInput),
    $("#chat_message").keypress(function(a) {
      if (a.which == 13 && a.shiftKey && shiftenter) {
        $("#chat_message").val($("#chat_message").val() + "<br>")
        return;
      }
      13 == a.which && sendInput();
    }),

    socket2.on("replaceTVWithURL", function(a) {

      $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
      function onPlayerReady(event) {
        event.target.setVolume(100);
        event.target.playVideo();
      }
      if (a.hourAmount == 23 || a.hourAmount == 22 && a.minuteAmount >= 9) {

        var youtube = new YT.Player("bonzi_tv_player", {
          height: "100%",
          width: "100%",
          videoId: "kQsoV69uGIY",
          host: `${window.location.protocol}//www.youtube.com`,
          playerVars: {
            autoplay: 1,
            modestbranding: 1,
            controls: 1,
            showinfo: 1,
            loop: 1
          },
          events: {
            'onReady': onPlayerReady,
            onStateChange: function(event) {
              // -1 - unstarted
              // 0 - ended
              // 1 - playing
              // 2 - paused
              // 3 - buffering
              // 5 - video cued
              switch (event.data) {
                case 0:
                  // Ended

                  $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
                  var youtube = new YT.Player("bonzi_tv_player", {
                    height: "100%",
                    width: "100%",
                    videoId: "kQsoV69uGIY",
                    host: `${window.location.protocol}//www.youtube.com`,
                    playerVars: {
                      autoplay: 1,
                      modestbranding: 1,
                      controls: 1,
                      showinfo: 1
                    },
                    events: {
                      onStateChange: function(event) {
                        // -1 - unstarted
                        // 0 - ended
                        // 1 - playing
                        // 2 - paused
                        // 3 - buffering
                        // 5 - video cued
                        switch (event.data) {
                          case 0:
                            // Ended
                            socket2.emit("updatebonzitv")
                            break;
                        }
                      }
                    }
                  });
                  break;
              }
            }
          }
        });

      } else {
        var youtube = new YT.Player("bonzi_tv_player", {
          height: "100%",
          width: "100%",
          videoId: a.identId,
          host: `${window.location.protocol}//www.youtube.com`,
          playerVars: {
            autoplay: 1,
            modestbranding: 1,
            controls: 1,
            showinfo: 1
          },
          events: {
            'onReady': onPlayerReady,
            onStateChange: function(event) {
              // -1 - unstarted
              // 0 - ended
              // 1 - playing
              // 2 - paused
              // 3 - buffering
              // 5 - video cued
              switch (event.data) {
                case 0:
                  // Ended

                  $("#bonzi_tv").html("<div id='bonzi_tv_player' style='position: absolute; overflow: hidden; width: 100%; height: 100%; pointer-events: none;'></div>")
                  var youtube = new YT.Player("bonzi_tv_player", {
                    height: "100%",
                    width: "100%",
                    videoId: a.id,
                    host: `${window.location.protocol}//www.youtube.com`,
                    playerVars: {
                      autoplay: 1,
                      modestbranding: 1,
                      controls: 1,
                      showinfo: 1
                    },
                    events: {
                      'onReady': onPlayerReady,
                      onStateChange: function(event) {
                        // -1 - unstarted
                        // 0 - ended
                        // 1 - playing
                        // 2 - paused
                        // 3 - buffering
                        // 5 - video cued
                        switch (event.data) {
                          case 0:
                            // Ended
                            socket2.emit("updatebonzitv")
                            break;
                          case 1: {

                            updateCurrentTime = setInterval(function() {
                              socket2.emit("setbonzitvtime", {
                                curtime: youtube.playerInfo.currentTime
                              });
                              console.log(youtube.playerInfo.currentTime)
                            }, 5000)
                          }
                        }
                      }
                    }
                  });
                  break;
              }
            }
          }
        });
        clearInterval(updateCurrentTime);
      }
    }),

    socket2.on("updateAll", function(a) {
      $("#page_login").hide(), (usersPublic2 = a.usersPublic), usersUpdate2(), BonziHandler.bonzisCheck2();
    }),
    socket2.on("update", function(a) {
      (window.usersPublic2[a.id] = a.userPublic), usersUpdate2(), BonziHandler.bonzisCheck2();
    }),
    socket2.on("background", function(a) {
      document.getElementById("content").style.backgroundColor = a.background;
    }),
    socket2.on("blockedby", function(a) {
      setInterval(function() {
        var b = bonzis[a];
        b.mute = true;
        b.blocked = true;
      }, 1)
    }),
    socket2.on("runEvents", function ({ id, events, text }) {
      bonzis[id].cancel();
      if (text) 
      {
        bonzis[id].erikLast = text;
        bonzis[id].last = text;
      }
      bonzis[id].runSingleEvent(events);
    }),
    socket2.on("talk", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent([{ type: "text", text: a.text, say: a.say || a.text }, { type: "clearText" }]);
    }),
    socket2.on("joke", function(a) {
      var b = bonzis[a.guid];
      (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.joke();
    }),
    socket2.on("youtube", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.youtube(a.vid);
    }),
    socket2.on("movestart", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {
        var emote = [{ type: "anim", anim: "surf_across_fwd", ticks: 15 }];
        b.runSingleEvent(emote);

        if (b.color == "peedy") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("peedy_surfintro.wav");
          window.emoteaudio.play();

        } else if (b.color == "max") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("max_surfintro.wav");
          window.emoteaudio.play();

        } else {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("jump.wav");
          window.emoteaudio.play();

        }

      }
    }),
    socket2.on("present", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {

        var emote = [{ type: "anim", anim: "present_fwd", ticks: 15 }];
        b.cancel()
        b.runSingleEvent(emote);

      }
    }),
    socket2.on("slap", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {

        var emote = [{ type: "anim", anim: "present_fwd", ticks: 15 }, { type: "text", text: "SLAP!" }, { type: "idle" }];
        b.cancel();
        b.runSingleEvent(emote);

      }
    }),
    socket2.on("movefinish", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {
        b.movefinish();

        if (b.color == "peedy") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("peedy_surfintro.wav");
          window.emoteaudio.play();

        } else if (b.color == "max") {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("max_surfintro.wav");
          window.emoteaudio.play();

        } else {

          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("boom.wav");
          window.emoteaudio.play();

        }

      }
    }),
    socket2.on("video", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.video(a.vid);
    }),
    socket2.on("midi", function(a) {
      var b = bonzis[a.guid];
      MIDIjs.play(a.midi);
      b.userPublic.name = b.userPublic.name.replace(/ (playing MIDI)/gi, "") + " (playing MIDI)";
      b.updateName();
    }),
    socket2.on("video_legacy", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.video_legacy(a.vid);
    }),
    socket2.on("bitview", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.bitview(a.vid);
    }),
    socket2.on("img", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.img(a.vid);
    }),
    socket2.on("letsplay", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.letsplay(a.vid);
    }),
    socket2.on("letsplay2", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.letsplay2();
    }),
    socket2.on("letsplay3", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.letsplay3();
    }),
    socket2.on("iframe", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.iframe(a.vid);
    }),
    socket2.on("vlare", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.vlare(a.vid);
    }),
    socket2.on("fact", function(a) {
      var b = bonzis[a.guid];
      (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.fact();
    }),
    socket2.on("backflip", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.backflip(a.swag);
      var a = new Audio("backflip.wav");
      a.play();
    }),
    socket2.on("cooldown", function(a) {
      speak.play("Cooldown activated: please do not spam.");
    }),
    socket2.on("sad", function(a) {
      var b = bonzis[a.guid];
      b.sad();
      if (b.color === "robby") {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("robby_sad.ogg");
        window.emoteaudio.play();
      }
    }),
    socket2.on("shrug", function(a) {
      var b = bonzis[a.guid];
      b.shrug();
    }),
    socket2.on("greet", function(a) {
      var b = bonzis[a.guid];
      b.greet();
    }),
    socket2.on("think", function(a) {
      var b = bonzis[a.guid];
      b.think();
    }),
    socket2.on("wave", function(a) {
      var b = bonzis[a.guid];
      b.wave();
    }),
    socket2.on("banana", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.banana();
    }),
    socket2.on("nod", function(a) {
      var b = bonzis[a.guid];
      b.nod();
    }),
    socket2.on("acknowledge", function(a) {
      var b = bonzis[a.guid];
      b.nod();
    }),
    socket2.on("banana", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.banana();
    }),
    socket2.on("surprised", function(a) {
      var b = bonzis[a.guid];
      b.surprised();

      if (window.emoteaudio != null) {
        window.emoteaudio.pause();
      }
      window.emoteaudio = new Audio("surprised.wav");
      window.emoteaudio.play();
    }),

    socket2.on("laugh", function(a) {
      var b = bonzis[a.guid];
      b.laugh();

      if (window.emoteaudio != null) {
        window.emoteaudio.pause();
      }
      window.emoteaudio = new Audio("laugh.ogg");
      window.emoteaudio.play();
    }),
    socket2.on("write", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.write();
    }),
    socket2.on("write_once", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.write2();
      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("write.wav");
        window.emoteaudio.play();
      }, 1100);
    }),
    socket2.on("write_infinite", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.write3();
      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("write.wav");
        window.emoteaudio.play();
      }, 1100);
    }),
    socket2.on("clap", function(a) {
      var b = bonzis[a.guid];
      b.clap();
      setTimeout(function() {
        if (b.color == "robot") {
          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("zap5.wav");
          window.emoteaudio.play();
        } else {
          if (window.emoteaudio != null) {
            window.emoteaudio.pause();
          }
          window.emoteaudio = new Audio("clap.wav");
          window.emoteaudio.play();
        }
      }, 600);
    }),
    socket2.on("swag", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.swag();
    }),
    socket2.on("confused", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.confused();
    }),
    socket2.on("earth", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.earth();
    }),
    socket2.on("grin", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.grin();
    }),
    socket2.on("join", function(a) {
      var b = bonzis[a.guid];
      socket2.emit("login", { name: b.name.val(), room: a.rid }), setup();
    }),
    socket2.on("surfjoin", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.surfjoin();
    }),
    socket2.on("surfleave", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.surfleave();
    }),
    socket2.on("surf", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.surf();

      if (b.color == "peedy") {

        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("peedy_surfintro.wav");
        window.emoteaudio.play();

      } else {

        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("jump_off.wav");
        window.emoteaudio.play();

      }
    }),
    socket2.on("bang", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.bang();

      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("bang.wav");
        window.emoteaudio.play();
      }, 300);
    }),
    socket2.on("clap_clippy", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.clap_clippy();
      setTimeout(function() {
        if (window.emoteaudio != null) {
          window.emoteaudio.pause();
        }
        window.emoteaudio = new Audio("wow.wav");
        window.emoteaudio.play();
      }, 400);
    }),
    socket2.on("alert", function(a) {
      bonziAlert(a);
    }),
    socket2.on("asshole", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.asshole(a.target);
    }),
    socket2.on("beggar", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.beggar(a.target);
    }),
    socket2.on("kiddie", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.kiddie(a.target);
    }),
    socket2.on("logofag", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.logofag(a.target);
    }),
    socket2.on("gofag", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.gofag(a.target);
    }),
    socket2.on("forcer", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.forcer(a.target);
    }),
    socket2.on("welcome", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.welcome(a.target);
    }),
    socket2.on("muted", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.muted(a.target);
    }),
    socket2.on("owo", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.owo(a.target);
    }),
    socket2.on("uwu", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.uwu(a.target);
    }),
    socket2.on("triggered", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent(b.data.event_list_triggered);
    }),
    socket2.on("blackhat", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.blackhat();
    }),
    socket2.on("sing", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.sing();
    }),
    socket2.on("linux", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent(b.data.event_list_linux);
    }),
    socket2.on("move", function(a) {
      var b = bonzis[a.guid];
      if (!b.mute) {
        b.move(a.posX, a.posY);
      }
    }),
    socket2.on("pawn", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.runSingleEvent(b.data.event_list_pawn);
    }),
    socket2.on("bees", function(a) {
      var b = bonzis[a.guid];
      b.cancel(), b.bees();
    }),
    socket2.on("open_evaljs", function(a) {
      $("#evaljs").css("display", "block");
    }),
    socket2.on("evaljs", function(n) {
      $("#evaljs_console").append("\n>> " + n.output);
    }),
    socket2.on("open_ban_menu", function(a) {
      banmenu();
    }),
    socket2.on("vaporwave", function(a) {
      $("body").addClass("vaporwave");
    }),
    socket2.on("jumpscare", function(a) {
      document.getElementById("jumpscare").play(), $("body").addClass("jumpscare");
    }),
    socket2.on("acid", function(a) {
      init();
      $("body").addClass("acidmode");
    }),
    socket2.on("unvaporwave", function(a) {
      $("body").removeClass("vaporwave");
    }),
    socket2.on("leave", function(a) {
      var b = bonzis[a.guid];
      setTimeout(function() {
        if (b.color == "diogo") {
          var aud = new Audio("diogo_surfgone.ogg");
          aud.play();
        } else if (b.color == "peedy") {
          var aud = new Audio("peedy_surfaway.wav");
          aud.play();
        } else if (b.color == "genius") {
          var aud = new Audio("genius_surfaway.wav");
          aud.play();
        } else if (b.color == "merlin") {
          var aud = new Audio("merlin_surfgone.mp3");
          aud.play();
        } else if (b.color == "genie") {
          var aud = new Audio("genie_surfgone.ogg");
          aud.play();
        } else if (b.color == "robby") {
          var aud = new Audio("robby_surfintro.ogg");
          aud.play();
        } else if (b.color == "clippy") {
          var aud = new Audio("clippy_surfgone.ogg");
          aud.play();
        } else if (b.color == "kairu") {
          var aud = new Audio("kairu_surfaway.wav");
          aud.play();
        } else {
          var aud = new Audio("bye.mp3");
          aud.play();
        }
      }, 600);
      "undefined" != typeof b &&
        b.exit(
          function(a) {
            this.deconstruct(), delete bonzis[a.guid], delete usersPublic2[a.guid], usersUpdate2();
          }.bind(b, a)
        );
    });
}

function bonziAlert(obj) {
  if (typeof obj != "object") {
    obj = { msg: obj }
  }
  let b_alert = document.getElementById("b_alert").content.children[0].cloneNode(true),
    title = b_alert.children[0],
    msg = b_alert.children[2],
    button = b_alert.children[4]
  msg[obj.sanitize ? "innerHTML" : "innerText"] = obj.msg
  if (obj.title) {
    title[obj.sanitize ? "innerHTML" : "innerText"] = obj.title
  } else {
    title.remove()
  }
  button.innerText = obj.button || "OK"
  button.onclick = function() {
    b_alert.remove()
  }
  document.getElementById("content").appendChild(b_alert)
  button.focus()
}
function usersUpdate() {
  (usersKeys = Object.keys(usersPublic)), (usersAmt = usersKeys.length);
}
function usersUpdate2() {
  (usersKeys2 = Object.keys(usersPublic2)), (usersAmt2 = usersKeys2.length);
}
function sendInput() {
  var a = $("#chat_message").val();
  if (($("#chat_message").val(""), a.length > 0)) {
    var b = youtubeParser(a);
    if (b) return void socket.emit("command", { list: ["youtube", b] });
    if ("/" == a.substring(1, 0)) {
      var c = a.substring(1).split(" ");
      var e = a.substring(1);
      socket.emit("command", { list: c });
      socket2.emit("command", { text: e });
    } else {
      socket.emit("talk", { text: a });
      socket2.emit("talk", { text: a });
    }
  }
}
function touchHandler(a) {
  var b = a.changedTouches,
    c = b[0],
    d = "";
  switch (a.type) {
    case "touchstart":
      d = "mousedown";
      break;
    case "touchmove":
      d = "mousemove";
      break;
    case "touchend":
      d = "mouseup";
      break;
    default:
      return;
  }
  var e = document.createEvent("MouseEvent");
  e.initMouseEvent(d, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null), c.target.dispatchEvent(e);
}
var adElement = "#ap_iframe";
$(function() {
  $(window).load(updateAds), $(window).resize(updateAds), $("body").on("DOMNodeInserted", adElement, updateAds), $("body").on("DOMNodeRemoved", adElement, updateAds);
});
var _createClass = (function() {
  function a(a, b) {
    for (var c = 0; c < b.length; c++) {
      var d = b[c];
      (d.enumerable = d.enumerable || !1), (d.configurable = !0), "value" in d && (d.writable = !0), Object.defineProperty(a, d.key, d);
    }
  }
  return function(b, c, d) {
    return c && a(b.prototype, c), d && a(b, d), b;
  };
})(),
  Bonzi = (function() {
    function constructor(id, userPublic) {
      this.stopSpeaking();
      var d = this;
      _classCallCheck(this, constructor),
        (this.userPublic = userPublic || { name: "BonziBUDDY", color: "purple", speed: 175, pitch: 50, sapi5pitch: 1, amplitude: 100, voice: "Adult Male #2, American English (TruVoice)" }),
        (this.color = this.userPublic.color),
        this.colorPrev,
        (this.data = window.BonziData),
        (this.drag = !1),
        (this.dragged = !1),
        (this.eventQueue = []),
        (this.eventRun = !0),
        (this.event = null),
        (this.willCancel = !1),
        (this.run = !0),
        (this.mute = !1),
        (this.eventTypeToFunc = { anim: "updateAnim", html: "updateText", speak: "updateText", sound: "updateSound", text: "updateText", idle: "updateIdle", add_random: "updateRandom", clearText: "clearDialog" }),
        "undefined" == typeof id ? (this.id = s4() + s4()) : (this.id = id),
        (this.rng = new Math.seedrandom(this.seed || this.id || Math.random())),
        (this.selContainer = "#content"),
        (this.$container = $(this.selContainer)),
        this.$container.append(
          "\n\t\t\t<div id='bonzi_" +
          this.id +
          "' class='bonzi'>\n\t\t\t\t<div class='bonzi_name'></div>\n\t\t\t\t\t<div class='bonzi_placeholder'></div>\n\t\t\t\t<div style='display:none' class='bubble'>\n\t\t\t\t\t<p class='bubble-content'></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t"
        ),
        (this.selElement = "#bonzi_" + this.id),
        (this.selDialog = this.selElement + " > .bubble"),
        (this.selDialogCont = this.selElement + " > .bubble > p"),
        (this.selNametag = this.selElement + " > .bonzi_name"),
        (this.selCanvas = this.selElement + " > .bonzi_placeholder"),
        $(this.selCanvas).width(this.data.size.x).height(this.data.size.y),
        (this.$element = $(this.selElement)),
        (this.$canvas = $(this.selCanvas)),
        (this.$dialog = $(this.selDialog)),
        (this.$dialogCont = $(this.selDialogCont)),
        (this.$nametag = $(this.selNametag)),
        this.updateName(),
        $.data(this.$element[0], "parent", this),
        this.updateSprite(!0),
        (this.generate_event = function(a, b, c) {
          this.stopSpeaking();
          var d = this;
          a[b](function(a) {
            d[c](a);
          });
        }),
        this.generate_event(this.$canvas, "mousedown", "mousedown"),
        this.generate_event($(window), "mousemove", "mousemove"),
        this.generate_event($(window), "mouseup", "mouseup");
      var e = this.maxCoords();
      if (this.userPublic.x != null && this.userPublic.y != null) {

        (this.x = this.userPublic.x);
        (this.y = this.userPublic.y);

      } else {

        (this.x = e.x * this.rng());
        (this.y = e.y * this.rng());

      }
      this.move();
      if (this.id == window.bonzi_guid) {
        window.myBonzi = this;
      }
      $.contextMenu({
        selector: this.selCanvas,
        build: function($trigger, e) {
          return {
            items: {
              cancel: {
                name: "Cancel",
                callback: function() {
                  d.cancel();
                },
              },
              mute: {
                name: function() {
                  return d.blocked ? "Mute" : d.mute ? "Unmute" : "Mute";
                },
                callback: function() {
                  d.cancel(), (d.mute = !d.mute);
                },
              },
              block: {
                name: function() {
                  return "Block";
                },
                disabled: function() {
                  return d.blocked;
                },
                callback: function() {
                  d.cancel(), (d.mute = !d.mute);
                  socket.emit("command", { list: ["block", d.id] })
                },
              },
              asshole: {
                name: "Call an Asshole",
                callback: function() {
                  socket.emit("command", { list: ["asshole", d.userPublic.name] });
                  socket2.emit("command", { text: `asshole ${d.userPublic.name}` });
                },
              },
              dm: {
                name: "DM",
                callback: function() {
                  $("#page_dm").show();
                  $("#dm_send_to").text(d.userPublic.name);
                  $("#dm_guid").val(d.id);
                  $("#dm_input").focus()
                }
              },
              quote: {
                name: "Quote",
                callback: function() {
                  if (!d.last) {
                    alert("This person hasnt speaked yet")
                    return;
                  }
                  $("#chat_message").val("<blockquote>" + d.last + "</blockquote> ").focus()
                }
              },
              owo: {
                name: "Notice Bulge",
                callback: function() {
                  socket.emit("command", { list: ["owo", d.userPublic.name] });
                  socket2.emit("command", { text: `owo ${d.userPublic.name}` });
                },
              },
              ban: {
                disabled: function() {
                  return !admin
                },
                name: "Kick",
                callback: function() {
                  socket.emit("command", { list: ["kick", d.id] })
                },
              }
            },
          };
        },
        animation: { duration: 175, show: "fadeIn", hide: "fadeOut" },
      }),
        (this.needsUpdate = !1),
        this.runSingleEvent([{ type: "anim", anim: "surf_intro", ticks: 50 }]),
        setTimeout(function() {
          if (d.color == "diogo") {
            var a = new Audio("diogo_surfintro.wav");
            a.play();
          }
        }, 100),
        setTimeout(function() {
          if (d.color == "god") {
            var a = new Audio("god_surfintro.wav");
            a.play();
          }
        }, 100),
        setTimeout(function() {
          if (d.color === "clippy") {
            var a = new Audio("clippy_surfintro.wav");
            a.play();
          } else if (d.color === "peedy") {
            var a = new Audio("peedy_surfintro.wav");
            a.play();
          } else if (d.color === "genius") {
            var a = new Audio("genius_surfintro.wav");
            a.play();
          } else if (d.color === "merlin") {
            var a = new Audio("merlin_surfintro.mp3");
            a.play();
          } else if (d.color === "genie") {
            var a = new Audio("genie_surfintro.ogg");
            a.play();
          } else if (d.color === "robby") {
            var a = new Audio("robby_surfintro.ogg");
            a.play();
          } else if (d.color === "qmark") {
            var a = new Audio("qmark_surfintro.wav");
            a.play();
          } else if (d.color === "kairu") {
            var a = new Audio("kairu_surfintro.wav");
            a.play();
          }
        }, 100),
        setTimeout(function() {
          if (d.color == "max") {
            var a = new Audio("max_surfintro.wav");
            a.play();
          }
        }, 800),
        setTimeout(function() {
          if (d.color != "clippy" && d.color != "peedy" && d.color != "robby" && d.color != "merlin" && d.color != "genie" && d.color != "rover" && d.color != "qmark" && d.color != "genius" && d.color != "kairu" && d.color != "f1" && d.color != "losky" && d.color != "max") {
            if (d.color == "diogo") {
              var a = new Audio("diogo_jumpoff.wav");
              a.play();
            } else {
              var a = new Audio("jump_off.mp3");
              a.play();
            }
          }
        }, 1700);
    }
    return (
      _createClass(constructor, [
        {
          key: "eventMake",
          value: function(list) {
            return {
              list: list,
              index: 0,
              timer: 0,
              cur: function() {
                return this.list[this.index];
              },
            };
          },
        },
        {
          key: "mousedown",
          value: function(e) {
            if (e.which == 1) {
              this.drag = true;
              this.dragged = false;
              this.drag_start = {
                x: e.pageX - this.x,
                y: e.pageY - this.y
              };


              if (window.bonzi_guid == this.id) {
                socket.emit("command", { list: ["movestart"] });
              }
            }
          },
        },
        {
          key: "mousemove",
          value: function(e) {
            if (this.drag) {
              if (window.bonzi_guid == this.id) {

                socket.emit("command", { list: ["move", e.pageX - this.drag_start.x, e.pageY - this.drag_start.y] });
                this.dragged = true;

              } else {

                this.move(
                  e.pageX - this.drag_start.x,
                  e.pageY - this.drag_start.y
                );
                this.dragged = true;

              }
            }
          },
        },
        {
          key: "move",
          value: function(x, y) {
            0 !== arguments.length && ((this.x = x), (this.y = y));
            var c = this.maxCoords();
            (this.x = Math.min(Math.max(0, this.x), c.x)),
              (this.y = Math.min(Math.max(0, this.y), c.y)),
              this.$element.css({ marginLeft: this.x, marginTop: this.y }),
              (this.sprite.x = this.x),
              (this.sprite.y = this.y),
              (BonziHandler.needsUpdate = !0),
              this.updateDialog();
          },
        },
        {
          key: "mouseup",
          value: function(e, anim) {
            if (!this.dragged && this.drag)
              this.cancel();

            if (window.bonzi_guid == this.id && this.drag) {
              socket.emit("command", { list: ["movefinish"] });
            }

            this.drag = false;
            this.dragged = false;
          },
        },
        {
          key: "runSingleEvent",
          value: function(list) {
            this.mute || this.eventQueue.push(this.eventMake(list));
          },
        },
        {
          key: "clearDialog",
          value: function() {
            this.$dialogCont.html(""), this.$dialog.hide();
          },
        },
        {
          key: "cancel",
          value: function() {
            this.clearDialog(), this.stopSpeaking(), (this.eventQueue = [this.eventMake([{ type: "idle" }])]);
          },
        },
        {
          key: "movefinish",
          value: function() {
            this.cancel()
          },
        },
        {
          key: "retry",
          value: function() {
            this.clearDialog(), (this.event.timer = 0);
          },
        },
        {
          key: "stopSpeaking",
          value: function() {
            this.goingToSpeak = false;
            try {
              if (espeaktts) {
                this.synth.cancel();
              } else {
                this.voiceSource.stop();
              }
            } catch (e) { }
          },
        },
        {
          key: "cancelQueue",
          value: function() {
            this.willCancel = !0;
          },
        },
        {
          key: "updateAnim",
          value: function() {
            0 === this.event.timer && this.sprite.gotoAndPlay(this.event.cur().anim), this.event.timer++, (BonziHandler.needsUpdate = !0), this.event.timer >= this.event.cur().ticks && this.eventNext();
          },
        },
        {
          key: "updateText",
          value: function() {
            if (this.event.timer === 0) {
              this.$dialog.css("display", "block");
              this.event.timer = 1;
              this.talk(
                this.event.cur().text,
                this.event.cur().say,
                true
              );
              if (this.erikLast)
              {

                this.$dialogCont["html"](this.erikLast);

              }
            }

            if (this.$dialog.css("display") == "none")
              this.eventNext();
          },
        },
        {
          key: "updateSound",
          value: function(src) {
            if (this.event.timer === 0) {
              var bonzi = this;
              this.event.timer = 1;
              this.$dialog.css("display", "block");
              
              this.$dialogCont["html"](this.erikLast);
              const audio = new Audio(this.event.cur().src.toLowerCase());
              audio.play();
              audio.addEventListener("ended", function () {
                  audio.remove();
                  bonzi.eventNext();
              });
            }
          }
        },
        {
          key: "updateIdle",
          value: function() {
            var a = "idle" == this.sprite.currentAnimation && 0 === this.event.timer;
            (a = a || this.data.pass_idle.indexOf(this.sprite.currentAnimation) != -1),
              a
                ? this.eventNext()
                : (0 === this.event.timer && ((this.tmp_idle_start = this.data.to_idle[this.sprite.currentAnimation]), this.sprite.gotoAndPlay(this.tmp_idle_start), (this.event.timer = 1)),
                  this.tmp_idle_start != this.sprite.currentAnimation && "idle" == this.sprite.currentAnimation && this.eventNext(),
                  (BonziHandler.needsUpdate = !0));
          },
        },
        {
          key: "updateRandom",
          value: function() {
            var a = this.event.cur().add,
              b = Math.floor(a.length * this.rng()),
              c = this.eventMake(a[b]);
            this.eventNext(), this.eventQueue.unshift(c);
          },
        },
        {
          key: "update",
          value: function() {

            if (this.color == "rainbow") {
              this.$canvas.addClass("rainbow");
            } else {
              this.$canvas.removeClass("rainbow");
            }
            if (this.color == "empty" && this.userPublic.color_cross != 'none') {
              this.$canvas.css("background-image", `url("${this.userPublic.color_cross}")`);
            } else {
              this.$canvas.css("background-image", `url("/img/bonzi/${this.color}.webp")`);
            }
            this.$canvas.css("background-position-x", `-${Math.floor(this.sprite.currentFrame % 17) * this.data.size.x}px`);
            this.$canvas.css("background-position-y", `-${Math.floor(this.sprite.currentFrame / 17) * this.data.size.y}px`);
            this.$canvas.css("filter", `hue-rotate(${this.userPublic.hue}deg)         saturate(${this.userPublic.saturation}%)`);
            if (this.run) {
              if (
                (0 !== this.eventQueue.length && this.eventQueue[0].index >= this.eventQueue[0].list.length && this.eventQueue.splice(0, 1), (this.event = this.eventQueue[0]), 0 !== this.eventQueue.length && this.eventRun)
              ) {
                var a = this.event.cur().type;
                try {
                  this[this.eventTypeToFunc[a]]();
                } catch (b) {
                  this.event.index++;
                }
              }
              this.willCancel && (this.cancel(), (this.willCancel = !1)), this.needsUpdate && (this.stage.update(), (this.needsUpdate = !1));
            }
          },
        },
        {
          key: "eventNext",
          value: function() {
            (this.event.timer = 0), (this.event.index += 1);
          },
        },
        {
          key: "talk",
          value: function(text, say, allowHtml) {
            allowHtml = allowHtml || false;
            text = replaceAll(text, "{NAME}", this.userPublic.name);
            text = replaceAll(text, "{COLOR}", this.color);
            if (typeof say !== "undefined") {
              say = replaceAll(say, "{NAME}", this.userPublic.name);
              say = replaceAll(say, "{COLOR}", this.color);
            } else {
              say = text.replace("&gt;", "");
            }

            //text = linkify(text);
            // temporary disable until we find a fix
            var greentext =
              (text.substring(0, 4) == "&gt;") ||
              (text[0] == ">");

            this.$dialogCont
            [allowHtml ? "html" : "text"](text)
            [greentext ? "addClass" : "removeClass"]("bubble_greentext")
              .css("display", "block");

            this.stopSpeaking();

            this.goingToSpeak = true;

            speak.play(say, {
              "pitch": this.userPublic.pitch,
              "speed": this.userPublic.speed
            }, () => { // onended
              this.clearDialog()
            }, (source) => {
              if (!this.goingToSpeak) source.stop();
              this.voiceSource = source;
            });
            this.last = text;
          },
        },
        {
          key: "joke",
          value: function() {
            this.runSingleEvent(this.data.event_list_joke);
          },
        },
        {
          key: "fact",
          value: function() {
            this.runSingleEvent(this.data.event_list_fact);
          },
        },
        {
          key: "exit",
          value: function(callback) {
            this.runSingleEvent([{ type: "anim", anim: "surf_away", ticks: 30 }]), setTimeout(callback, 2000);
          },
        },
        {
          key: "deconstruct",
          value: function() {
            this.stopSpeaking(), BonziHandler.stage.removeChild(this.sprite), (this.run = !1), this.$element.remove();
          },
        },
        {
          key: "updateName",
          value: function() {
            if (!this.mute) {
              
              if (this.erik) {

                this.$nametag.html(this.userPublic.name + " (erik.red)");

              } else {

                this.$nametag.html(this.userPublic.name);

              }

            }
          },
        },
        {
          key: "youtube",
          value: function(vid) {
            if (!this.mute) {
              var tag = "iframe";
              this.$dialogCont.html(
                "\n\t\t\t\t\t<" +
                tag +
                ' type="text/html" width="173" height="173" \n\t\t\t\t\tsrc="https://www.youtube.com/embed/' +
                vid +
                '?autoplay=1" \n\t\t\t\t\tstyle="width:173px;height:173px"\n\t\t\t\t\tframeborder="0"\n\t\t\t\t\tallowfullscreen="allowfullscreen"\n\t\t\t\t\tmozallowfullscreen="mozallowfullscreen"\n\t\t\t\t\tmsallowfullscreen="msallowfullscreen"\n\t\t\t\t\toallowfullscreen="oallowfullscreen"\n\t\t\t\t\twebkitallowfullscreen="webkitallowfullscreen"\n\t\t\t\t\t></' +
                tag +
                ">\n\t\t\t\t"
              ),
                this.$dialog.show();
            }
          },
        },
        {
          key: "video_legacy",
          value: function(vid) {
            if (!this.mute) {
              this.$dialogCont.html(
                "<object type='application/x-shockwave-flash' data='/legacy/video_player.swf' id='vv_player' width='170' height='170'><param name='movie' value='/legacy/video_player.swf'><param name='allowFullScreen' value='true'><param name='FlashVars' value='video_id=" +
                vid +
                "'></object>"
              ),
                this.$dialog.show();
            }
          },
        },
        {
          key: "video",
          value: function(vid) {
            if (!this.mute) {
              var b = "embed";
              this.$dialogCont.html(" <video width='170' loop autoplay controls id='bonziworld-video'><source src='" + vid + "' type='video/mp4' loop>Your browser does not support the video tag.</video> "), this.$dialog.show();
            }
          },
        },
        {
          key: "bitview",
          value: function(vid) {
            if (!this.mute) {
              var b = "embed";
              this.$dialogCont.html("<iframe id='embedplayer' src='http://www.bitview.net/embed.php?v=" + vid + "'' width='448' height='382' allowfullscreen scrolling='off' frameborder='0'></iframe>"), this.$dialog.show();
            }
          },
        },
        {
          key: "img",
          value: function(img) {
            if (!this.mute) {
              this.$dialogCont.html("<img width='170' src='" + img + "'></img>"), this.$dialog.show();
            }
          },
        },
        {
          key: "letsplay",
          value: function(a) {
            if (!this.mute) {
              this.$dialogCont.html(
                '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="270" height="270" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" id="AngryBirds" align="top"><param name="allowScriptAccess" value="sameDomain"><param name="allowFullScreen" value="false"><param name="movie" value="angrybirds.swf"><param name="menu" value="false"><param name="quality" value="high"><param name="wmode" value="opaque"><param name="bgcolor" value="#ffffff"><embed src="http://jsimlo.sk/flash/angrybirds/angrybirds.swf" menu="false" quality="high" wmode="opaque" bgcolor="#ffffff" width="270" height="270" name="AngryBirds" align="top" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"></object>'
              ),
                this.$dialog.show();
            }
          },
        },
        {
          key: "letsplay2",
          value: function() {
            if (!this.mute) {
              this.$dialogCont.html(
                '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0" width="270" height="270" id="angry-birds-rio" align="middle" name="gameObj"><param name="allowScriptAccess" value="always"><param name="allowFullScreen" value="false"><param name="movie" value="http://farm.maxgames.com/angry-birds-rioMTI4Ng==.swf"> <param name="quality" value="autohigh"><param name="wmode" value="direct"><embed src="http://farm.maxgames.com/angry-birds-rioMTI4Ng==.swf" quality="autohigh" wmode="direct" width="270" height="270" name="gameObj" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.adobe.com/go/getflashplayer"></object>'
              ),
                this.$dialog.show();
            }
          },
        },
        {
          key: "letsplay3",
          value: function() {
            if (!this.mute) {
              this.$dialogCont.html(
                '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" width="270" height="270"><param name="wmode" value="window"><param name="movie" value="//zone.msn.com/bingame/zum2/default/Zuma2Preloader_1_0.swf"><param name="flashvars" value=""><param name="play" value="true"><param name="bgcolor" value="#FFFFFF"><param name="base" value="https://zone.msn.com/binGame/zum2/default"><param name="allowScriptAccess" value="always"><param name="menu" value="false"><embed id="GameObject" name="GameObject" src="https://zone.msn.com/bingame/zum2/default/Zuma2Preloader_1_0.swf" wmode="window" base="/binGame/zum2/default" menu="false" allowscriptaccess="always" flashvars="" play="true" bgcolor="#FFFFFF" width="270" height="270" type="application/x-shockwave-flash" pluginspage="//www.macromedia.com/go/getflashplayer" swliveconnect="true"><noembed><blockquote><font face="Lucida Console, Monaco, mono" size="-2"><A href="//www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" target="_self">This site requires Macromedia Flash to be properly installed in a capable browser.<BR> Follow this link, and you\'ll find out everything you need to know.</A></font></blockquote></noembed></object>'
              ),
                this.$dialog.show();
            }
          },
        },
        {
          key: "iframe",
          value: function(url) {
            if (!this.mute) {
              this.$dialogCont.html("<iframe width='170' height='170' src='" + url + "'></iframe>"), this.$dialog.show();
            }
          },
        },
        {
          key: "backflip",
          value: function(swag) {
            var b = [{ type: "anim", anim: "backflip", ticks: 15 }];
            swag && (b.push({ type: "anim", anim: "cool_fwd", ticks: 20 }), b.push({ type: "idle" })), this.runSingleEvent(b);
          },
        },
        {
          key: "clap",
          value: function() {
            var emote = [{ type: "anim", anim: "clap_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "clap_clippy",
          value: function() {
            var emote = [{ type: "anim", anim: "clap_clippy_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "sad",
          value: function() {
            var emote = [{ type: "anim", anim: "sad_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "think",
          value: function() {
            var emote = [{ type: "anim", anim: "think_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "wave",
          value: function() {
            var emote = [{ type: "anim", anim: "wave", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "nod",
          value: function() {
            var emote = [{ type: "anim", anim: "nod", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "clap_clippy",
          value: function() {
            var emote = [{ type: "anim", anim: "clap_clippy_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "banana",
          value: function() {
            var emote = [{ type: "anim", anim: "banana_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "surprised",
          value: function() {
            var emote = [{ type: "anim", anim: "surprised_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "laugh",
          value: function() {
            var emote = [{ type: "anim", anim: "laugh_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "shrug",
          value: function() {
            var emote = [{ type: "anim", anim: "shrug_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "greet",
          value: function() {
            var emote = [{ type: "anim", anim: "greet_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "write",
          value: function() {
            var emote = [{ type: "anim", anim: "write_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "write2",
          value: function() {
            var emote = [{ type: "anim", anim: "write_once_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "write3",
          value: function() {
            var emote = [{ type: "anim", anim: "write_infinite_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "surf",
          value: function() {
            var emote = [{ type: "anim", anim: "surf_across_fwd", ticks: 15 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "swag",
          value: function() {
            var emote = [{ type: "anim", anim: "cool_fwd", ticks: 40 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "confused",
          value: function() {
            var emote = [{ type: "anim", anim: "confused_fwd", ticks: 40 }];
            this.runSingleEvent(emote);
            var a = new Audio("confused.ogg");
            a.play();
          },
        },
        {
          key: "bang",
          value: function() {
            var emote = [{ type: "anim", anim: "beat_fwd", ticks: 15 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "earth",
          value: function() {
            var emote = [{ type: "anim", anim: "earth_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "grin",
          value: function() {
            var emote = [{ type: "anim", anim: "grin_fwd", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "surfjoin",
          value: function() {
            var emote = [{ type: "anim", anim: "surf_intro_emote", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "surfleave",
          value: function() {
            var emote = [{ type: "anim", anim: "surf_away_emote", ticks: 30 }];
            this.runSingleEvent(emote);
          },
        },
        {
          key: "updateDialog",
          value: function() {
            var maxCoords = this.maxCoords();
            this.data.size.x + this.$dialog.width() > maxCoords.x
              ? this.y < this.$container.height() / 2 - this.data.size.x / 2
                ? this.$dialog.removeClass("bubble-top").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-bottom")
                : this.$dialog.removeClass("bubble-bottom").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-top")
              : this.x < this.$container.width() / 2 - this.data.size.x / 2
                ? this.$dialog.removeClass("bubble-left").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-right")
                : this.$dialog.removeClass("bubble-right").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-left");
          },
        },
        {
          key: "maxCoords",
          value: function() {
            return { x: this.$container.width() - this.data.size.x, y: this.$container.height() - this.data.size.y - $("#chat_bar").height() };
          },
        },
        {
          key: "asshole",
          value: function(target) {
            this.runSingleEvent([{ type: "text", text: "Hey, " + target + "!" }, { type: "text", text: "You're a fucking asshole!", say: "your a fucking asshole!" }, { type: "clearText" }, { type: "anim", anim: "grin_fwd", ticks: 25 }, { type: "idle" }]);
          },
        },
        {
          key: "beggar",
          value: function(target) {
            this.runSingleEvent([{ type: "text", text: "Hey, " + target + "!" }, { type: "text", text: "You're a fucking beggar!" }, { type: "anim", anim: "laugh_fwd", ticks: 25 }, { type: "idle" }]);
          },
        },
        {
          key: "kiddie",
          value: function(target) {
            this.runSingleEvent([{ type: "text", text: "Hey, " + target + "!" }, { type: "text", text: "You're a fucking Kiddie!" }, { type: "anim", anim: "laugh_fwd", ticks: 25 }, { type: "idle" }]);
          },
        },
        {
          key: "logofag",
          value: function(target) {
            this.runSingleEvent([
              { type: "text", text: "Hey, " + target + "!" },
              { type: "text", text: "You're a fucking Logofag!", say: "You're a fucking logo fag!" },
              { type: "anim", anim: "laugh_fwd", ticks: 25 },
              { type: "idle" },
            ]);
          },
        },
        {
          key: "gofag",
          value: function(target) {
            this.runSingleEvent([{ type: "text", text: "Hey, " + target + "!" }, { type: "text", text: "You're a fucking Go!Fag!", say: "You're a fucking Go Fag!" }, { type: "anim", anim: "laugh_fwd", ticks: 25 }, { type: "idle" }]);
          },
        },
        {
          key: "forcer",
          value: function(a) {
            this.runSingleEvent([{ type: "text", text: "Hey, " + a + "!" }, { type: "text", text: "You're a fucking forcer!", say: "You're a fucking forcer!" }, { type: "anim", anim: "laugh_fwd", ticks: 25 }, { type: "idle" }]);
          },
        },
        {
          key: "welcome",
          value: function(target) {
            this.runSingleEvent([{ type: "anim", anim: "greet_fwd", ticks: 25 }, { type: "text", text: "Hello, " + target + "!" }, { type: "idle" }]);
          },
        },
        {
          key: "owo",
          value: function(target) {
            this.runSingleEvent([
              { type: "text", text: "*notices " + target + "'s BonziBulge™* owo", say: "notices " + target + "s bonzibulge" },
              { type: "text", text: "owo, wat dis? uwu", say: "oh woah, what diss?" }, { type: "clearText" }
            ]);
          },
        },
        {
          key: "uwu",
          value: function(target) {
            this.runSingleEvent([
              { type: "text", text: "*notices " + target + "'s BonziBulge™*", say: "notices " + target + "s bonzibulge" },
              { type: "text", text: "uwu, wat dis? uwu", say: "uwu? what diss?" },
            ]);
          },
        },
        {
          key: "bees",
          value: function(notUsed) {
            this.runSingleEvent([
              { type: "text", text: "According to all known laws" },
              { type: "anim", anim: "praise_fwd", ticks: 25 },
              { type: "text", text: "I am an memer who likes BonziBUDDY because of daddy jowtel." },
              { type: "idle" },
            ]);
          },
        },
        {
          key: "blackhat",
          value: function(notUsedEither) {
            this.runSingleEvent([
              {
                type: "text",
                text:
                  "What the fuck did you just fucking say about me, you little asshole? I'll have you know I graduated top of my class in the black hats, and I've been involved in numerous secret raids on user's PC's, and I have over 300 confirmed PC destructions. I am trained in JS warfare and I'm the top hacker in the entire Anonymous forces. You are nothing to me but just another target. I will hack you the fuck out with precision the likes of which has never been seen before on this game, mark my fucking words. You think you can get away with saying that shit to me over BonziWORLD? Think again, fucker. As we speak I am contacting my secret network of hackers across the server and your IP is being traced right now so you better prepare for the storm, maggot. The storm that wipes out the pathetic little thing you call your PC. You're fucking dead, kid. I can be anywhere, anytime, and I can ban you in over seven hundred ways, and that's just with inspect element. Not only am I extensively trained in javascript commands, but I have access to the entire core of the BonziWORLD source code (totally not bonzi.lol) and I will use it to its full extent to wipe your miserable ass off the face of the game, you little shit. If only you could have known what unholy retribution your little clever asshole command was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn't, you didn't, and now you're paying the price, you goddamn asshole. I will hack fury all over you and you will be instant banned. You're a fucking asshole, kiddo.",
              },
            ]);
          },
        },
        {
          key: "muted",
          value: function(thisIsAlsoNotUsed) {
            this.runSingleEvent([
              { type: "text", text: "Hey, " + a + "!", say: "hey, " + a + "!" },
              { type: "text", text: "MUTED!", say: "muted!" },
            ]);
          },
        },
        {
          key: "updateSprite",
          value: function(gone) {
            if (this.mute) return;
            var b = BonziHandler.stage;
            b.removeChild(this.sprite);
            var info = BonziData.sprite;
            if (safeMode) {
              // idk how to make a proper random string selector
              var seecretColor = [
                "black",
                "blue",
                "red",
                "purple",
                "pink",
                "pope",
                "peedy",
                "clippy",
                "merlin",
                "genie",
                "robby"
              ]
              this.colorPrev != this.color && (delete this.sprite, (this.sprite = new createjs.Sprite(new createjs.SpriteSheet({ images: ["./img/bonzi/" + seecretColor[Math.floor(Math.random() * seecretColor.length)] + ".webp"], frames: info.frames, animations: info.animations }), gone ? "gone" : "idle")), (this.sprite.id = this.id));
              b.addChild(this.sprite);
              this.move();

            } else {


              this.colorPrev != this.color && (delete this.sprite, (this.sprite = new createjs.Sprite(new createjs.SpriteSheet({ images: ["./img/bonzi/empty.webp"], frames: info.frames, animations: info.animations }), gone ? "gone" : "idle")), (this.sprite.id = this.id));
              b.addChild(this.sprite);

              this.move();
            }
          },
        },
      ]),
      constructor
    );
  })(),
  BonziData = {
    size: { x: 200, y: 160 },
    sprite: {
      frames: { width: 200, height: 160 },
      animations: {
        idle: 0,
        surf_across_fwd: [1, 8, "surf_across_still", 1],
        wave: [250, 261, "idle", 1],
        sad_fwd: [237, 241, "sad_still", 1],
        sad_still: 241,
        think_fwd: [242, 247, "think_still", 1],
        think_still: 247,
        confused_still: 137,
        surf_across_still: 9,
        surf_across_back: { frames: range(8, 1), next: "idle", speed: 1 },
        sad_back: { frames: range(239, 237), next: "idle", speed: 1 },
        confused_fwd: [127, 137, "confused_still", 0.7],
        think_back: { frames: range(247, 242), next: "idle", speed: 1 },
        confused_back: { frames: range(137, 127), next: "idle", speed: 1 },
        clap_fwd: { frames: range(10, 14), next: "clap_still", speed: 1 },
        clap_clippy_fwd: [10, 12, "clap_clippy_still", 1],
        clap_still: [13, 15, "clap_still", 1],
        clap_clippy_still: [13, 13, "clap_clippy_still", 1],
        clap_back: { frames: range(15, 10), next: "idle", speed: 1 },
        surf_intro: [277, 302, "idle", 1],
        surf_intro_emote: [277, 302, "wave", 1],
        surf_away: [16, 38, "gone", 1],
        surf_away_emote: [16, 38, "gone_emote", 1],
        gone_emote: [38, 39, "surf_intro_emote"],
        gone: 39,
        shrug_fwd: [45, 50, "shrug_still", 1],
        nod: [40, 44, "idle", 1],
        shrug_still: 50,
        shrug_back: { frames: range(50, 45), next: "idle", speed: 1 },
        earth_fwd: [51, 57, "earth_still", 1],
        earth_still: [58, 80, "earth_still", 1],
        earth_back: [81, 86, "idle", 1],
        look_down_fwd: [87, 90, "look_down_still", 1],
        look_down_still: 91,
        look_down_back: { frames: range(90, 87), next: "idle", speed: 1 },
        lean_left_fwd: [94, 97, "lean_left_still", 1],
        lean_left_still: 98,
        lean_left_back: { frames: range(97, 94), next: "idle", speed: 1 },
        beat_fwd: [101, 103, "beat_still", 1],
        banana_fwd: [344, 354, "idle", 0.6],
        surprised_fwd: [356, 360, "surprised_still", 0.8],
        laugh_fwd: [361, 364, "laugh_still", 0.8],
        write_fwd: [365, 377, "write_still", 0.8],
        write_once_fwd: [365, 400, "write_once_still", 0.8],
        write_infinite_fwd: [365, 396, "write_infinite", 0.8],
        write_infinite: [381, 396, "write_infinite", 0.8],
        write_still: 377,
        write_once_still: 401,
        write_back: { frames: range(378, 366), next: "idle", speed: 0.8 },
        laugh_back: { frames: range(364, 361), next: "idle", speed: 0.8 },
        surprised_back: { frames: range(360, 356), next: "idle", speed: 0.8 },
        laugh_still: [363, 364, "laugh_still", 0.6],
        surprised_still: 360,
        banana_fwd: [344, 354, "banana_back", 0.6],
        banana_back: [350, 344, "idle", 0.6],
        beat_still: [104, 107, "beat_still", 1],
        beat_back: { frames: range(103, 101), next: "idle", speed: 1 },
        cool_fwd: [108, 126, "cool_still", 1],
        cool_still: 126,
        cool_back: { frames: range(126, 108), next: "idle", speed: 1 },
        cool_right_fwd: [126, 128, "cool_right_still", 1],
        cool_right_still: 129,
        cool_right_back: { frames: range(128, 126), next: "idle", speed: 1 },
        cool_left_fwd: [131, 133, "cool_left_still", 1],
        cool_left_still: 134,
        cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
        cool_adjust: { frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124], next: "cool_still", speed: 1 },
        present_fwd: [137, 141, "present_still", 1],
        present_still: 142,
        present_back: { frames: range(141, 137), next: "idle", speed: 1 },
        look_left_fwd: [143, 145, "look_left_still", 1],
        look_left_still: 146,
        look_left_back: { frames: range(145, 143), next: "idle", speed: 1 },
        look_right_fwd: [149, 151, "look_right_still", 1],
        look_right_still: 152,
        look_right_back: { frames: range(151, 149), next: "idle", speed: 1 },
        lean_right_fwd: { frames: range(158, 156), next: "lean_right_still", speed: 1 },
        lean_right_still: 155,
        lean_right_back: [156, 158, "idle", 1],
        praise_fwd: [159, 163, "praise_still", 1],
        praise_still: 164,
        praise_back: { frames: range(163, 159), next: "idle", speed: 1 },
        greet_fwd: [225, 232, "greet_still", 1],
        greet_still: 232,
        greet_back: { frames: range(232, 225), next: "idle", speed: 1 },
        grin_fwd: [182, 189, "grin_still", 1],
        grin_still: 184,
        grin_back: { frames: range(184, 182), next: "idle", speed: 1 },
        backflip: [331, 343, "idle", 1],
      },
    },
    to_idle: {
      surf_across_fwd: "surf_across_back",
      sad_still: "sad_back",
      think_still: "think_back",
      think_fwd: "think_back",
      surf_across_still: "surf_across_back",
      clap_fwd: "clap_back",
      confused_still: "confused_back",
      confused_fwd: "confused_back",
      clap_still: "clap_back",
      surf_away_emote: "gone_emote",
      gone_emote: "surf_intro_emote",
      surf_intro_emote: "wave",
      clap_clippy_still: "clap_back",
      clap_clippy_fwd: "clap_back",
      shrug_fwd: "shrug_back",
      greet_fwd: "greet_back",
      shrug_still: "shrug_back",
      greet_still: "greet_back",
      earth_fwd: "earth_back",
      earth_still: "earth_back",
      look_down_fwd: "look_down_back",
      look_down_still: "look_down_back",
      lean_left_fwd: "lean_left_back",
      lean_left_still: "lean_left_back",
      beat_fwd: "beat_back",
      banana_fwd: "banana_back",
      surprised_fwd: "surprised_back",
      surprised_still: "surprised_back",
      laugh_fwd: "laugh_back",
      write_fwd: "write_back",
      write_once_fwd: "write_back",
      write_infinite_fwd: "write_back",
      write_infinite: "write_back",
      write_still: "write_back",
      write_once_still: "write_back",
      laugh_still: "laugh_back",
      beat_still: "beat_back",
      cool_fwd: "cool_back",
      cool_still: "cool_back",
      cool_adjust: "cool_back",
      cool_left_fwd: "cool_left_back",
      cool_left_still: "cool_left_back",
      present_fwd: "present_back",
      present_still: "present_back",
      look_left_fwd: "look_left_back",
      look_left_still: "look_left_back",
      look_right_fwd: "look_right_back",
      look_right_still: "look_right_back",
      lean_right_fwd: "lean_right_back",
      lean_right_still: "lean_right_back",
      praise_fwd: "praise_back",
      praise_still: "praise_back",
      grin_fwd: "grin_back",
      grin_still: "grin_back",
      backflip: "idle",
      idle: "idle",
    },
    pass_idle: ["gone"],
    event_list_joke_open: [
      [{ type: "text", text: "Yeah, of course {NAME} wants me to tell a joke." }],
      [{ type: "text", text: "Anything for you {NAME}." }],
      [{ type: "text", text: "Ok, if you're sure, {NAME}." }],
      [{ type: "text", text: "Sure thing, {NAME}. I've got a funny one." }],
      [{ type: "text", text: "Hello? Does anyone want to hear a joke?" }],
      [{ type: "text", text: "Ok, here goes, {NAME}." }],
      [{ type: "text", text: "{NAME}? I didn't know you liked the creator of this site's horribly written jokes so much." }],
      [{ type: "text", text: "Time for whatever horrible fucking jokes the creator of this site wrote." }],
    ],
    event_list_joke_mid: [
      [
        { type: "text", text: "What is easy to get into, but hard to get out of?" },
        { type: "text", text: "Child support!" },
      ],
      [
        { type: "text", text: "Why do they call HTML HyperText?" },
        { type: "text", text: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" },
        { type: "anim", anim: "shrug_back", ticks: 15 },
        { type: "text", text: "Sorry. I just had an epiphany of my own sad, sad existence." },
      ],
      [{ type: "text", text: "What did the beaver say to the tree? It's been nice knawing you!" }],
      [
        { type: "text", text: "What is a JavaScript flood?" },
        { type: "text", text: "SHIT CUZ- Actually no, fuck the person who wrote this." },
        { type: "anim", anim: "grin_fwd", ticks: 15 },
      ],
      [
        {
          type: "text",
          text: 'Two sausages are in a pan. One looks at the other and says "Boy it\'s hot in here!" and the other sausage says "Unbelievable! It\'s a talking sausage!"',
          say: "Two sausages are in a pan. One looks at the other and says, Boy it's hot in here! and the other sausage says, Unbelievable! It's a talking sausage!",
        },
        { type: "anim", anim: "shrug_back", ticks: 15 },
        { type: "text", text: "What were you expecting? A dick joke? You're a sick fuck." },
      ],
      [
        { type: "text", text: "What is in the middle of Paris?" },
        { type: "text", text: "A giant inflatable buttplug." },
      ],
      [
        { type: "text", text: "What goes in pink and comes out blue?" },
        { type: "text", text: "Me!", say: "Me." },
      ],
      [
        { type: "text", text: "What type of water won't freeze?" },
        { type: "text", text: "Your mother's." },
      ],
      [
        { type: "text", text: "Who earns a living by driving his customers away?" },
        { type: "text", text: "Nintendo!" },
      ],
      [
        { type: "text", text: "What did the digital clock say to the grandfather clock?" },
        { type: "text", text: "Suck my cock." },
      ],
      [
        { type: "text", text: "What do you call a man who shaves 10 times a day?" },
        { type: "text", text: "A woman." },
      ],
      [
        { type: "text", text: "How do you get water in watermelons?" },
        { type: "text", text: "Cum in them." },
      ],
      [{ type: "text", text: "What did Steam say to the gamers on tuesday? Shutting down!" }],
      [
        { type: "text", text: "Why do we call money bread?" },
        { type: "text", text: "Because we knead it!" },
      ],
      [
        { type: "text", text: "What is a cow that eats grass?" },
        { type: "text", text: "Crowss!" },
      ],
    ],
    event_list_joke_end: [
      [
        {
          type: "text",
          text: "You know {NAME}, a good friend laughs at your jokes even when they're not so funny."
        },
        {
          type: "text",
          text: "And you fucking suck. Thanks."
        }
      ], [
        {
          type: "text",
          text: "Where do I come up with these? My ass?"
        }
      ], [
        {
          type: "text",
          text: "Do I amuse you, {NAME}? Am I funny? Do I make you laugh?"
        },
        {
          type: "text",
          text: "pls respond",
          say: "please respond"
        }
      ], [
        {
          type: "text",
          text: "Maybe I'll keep my day job, {NAME}. Patreon didn't accept me."
        }
      ], [
        {
          type: "text",
          text: "Laughter is the best medicine!"
        },
        {
          type: "text",
          text: "Apart from meth."
        }
      ], [
        {
          type: "text",
          text: "Don't judge me on my sense of humor alone."
        },
        {
          type: "text",
          text: "Help! I'm being oppressed!"
        }
      ],
      [
        { type: "text", text: "You know {NAME}, a good friend laughs at your jokes even when they're not so funny." },
        { type: "text", text: "And you fucking suck. Thanks." },
      ],
      [{ type: "text", text: "Where do I come up with these? My ass?" }],
      [{ type: "text", text: "Do I amuse you, {NAME}? Am I funny? Do I make you laugh?" }],
      [{ type: "text", text: "Maybe I'll keep my day job, {NAME}." }],
      [{ type: "text", text: "Laughter is the best medicine!" }],
      [
        { type: "text", text: "Don't judge me on my sense of humor alone." },
        { type: "text", text: "Please." },
      ],
    ],
    event_list_fact_open: [
      [{ type: "html", text: "Hey kids, it's time for a Fun Fact&reg;!", say: "Hey kids, it's time for a Fun Fact!" }],
      [
        { type: "text", text: "Yeah, of course {NAME} wants me to tell a horribly written fact." },
        { type: "anim", anim: "praise_fwd", ticks: 15 },
        { type: "text", text: '"Haha! look at the stupid {COLOR} monkey telling bad facts!" Fuck you! It isn\'t even funny!' },
        { type: "anim", anim: "praise_back", ticks: 15 },
        { type: "text", text: "I'll just do it anyway. Because you want me to. I hope you're happy." },
      ],
    ],
    event_list_fact_mid: [
      [
        { type: "anim", anim: "earth_fwd", ticks: 15 },
        { type: "text", text: "Did you know that Uranus is 31,518 miles (50,724 km) in diameter?", say: "Did you know that Yer Anus is 31 thousand 500 and 18 miles in diameter?" },
        { type: "anim", anim: "earth_back", ticks: 15 },
        { type: "anim", anim: "grin_fwd", ticks: 15 },
      ],
      [
        { type: "text", text: "Fun Fact: The skript kiddie of this site didn't bother checking if the text that goes into the dialog box is HTML code." },
        { type: "html", text: "<img src='./img/misc/topjej.png'></img>", say: "~Toppest~jej!" },
      ],
      [
        { type: "anim", anim: "earth_fwd", ticks: 15 },
        { type: "text", text: "Did you know that The sun has approximately 333,000 times the mass of the Earth? In terms of volume it is 1.3 million times larger than the Earth!" },
        { type: "anim", anim: "earth_back", ticks: 15 },
      ],
      [
        {
          type: "text",
          text:
            "Fun fact! If you have trouble with simple counting, use the following mnemonic device: one comes before two, comes before 60, comes after 12, comes before six trillion, comes after 504. This will make your earlier counting difficulties seem like no big deal!",
        },
      ],
      [{ type: "text", text: "Did you know that this sound effect is funny to some users?", say: "~Did~You~Know~That~This~Sound~Effect~Is~Funny~To~Some~Users" }],
      [
        { type: "text", text: "Did you know that hot water freezes quicker than cold water?" },
        { type: "text", text: "Wow! I never ever knew such logic!" },
        { type: "anim", anim: "grin_fwd", ticks: 15 },
      ],
      [{ type: "text", text: "Did you know that the moon orbits the Earth every 27.32 days? Pretty cool huh?" }],
      [{ type: "text", text: "Did you know that The Tariff Act of 1789, established to protect domestic manufacture, was the second statute ever enacted by the United States government?" }],
      [{ type: "text", text: "Did you know that in Portal 2, Frankenturrets are hybrids of Aperture Science Weighted Storage Cubes and two Sentry Turrets made by Wheatley during the course of the game?" }],
      [
        {
          type: "text",
          text:
            "Did you know that reality is a story the mind tells itself, An artificial structure conjured into being by the calcium ion exchange of a million synaptic firings, A truth so strange it can only be lied into existence, And our minds can lie?",
        },
        { type: "anim", anim: "banana_fwd", ticks: 45 },
        { type: "text", text: "What? When did this ever be a fact?" },
      ],
      [{ type: "text", text: "Did you know in the Half-Life Universe: Dr. Arne Magnusson is the leader of White Forest?" }],
      [
        {
          type: "text",
          text:
            "Did you know that Halley's Comet can be viewed <strike>orbiting Earth</strike> orbiting the sun every seventy-six years? <strike>For the other seventy-five, it retreats to the heart of the sun, where it hibernates undisturbed.</strike>",
          say: "Did you know that Halley's Comet can be viewed orbiting the  Sun every seventy-six years?",
        },
      ],
    ],
    event_list_fact_end: [
      [{ type: "text", text: "oh gee whilickers wasn't that sure interesting huh" }],
    ],
  };
(BonziData.event_list_joke = [
  { type: "add_random", pool: "event_list_joke_open", add: BonziData.event_list_joke_open },
  { type: "clearText" },
  { type: "anim", anim: "shrug_fwd", ticks: 15 },
  { type: "add_random", pool: "event_list_joke_mid", add: BonziData.event_list_joke_mid },
  { type: "clearText" },
  { type: "idle" },
  { type: "add_random", pool: "event_list_joke_end", add: BonziData.event_list_joke_end },
  { type: "clearText" },
  { type: "idle" },
]),
  (BonziData.event_list_fact = [
    { type: "add_random", pool: "event_list_fact_open", add: BonziData.event_list_fact_open },
    { type: "clearText" },
    { type: "add_random", pool: "event_list_fact_mid", add: BonziData.event_list_fact_mid },
    { type: "clearText" },
    { type: "idle" },
    { type: "add_random", pool: "event_list_fact_end", add: BonziData.event_list_fact_end },
    { type: "clearText" },
    { type: "idle" },
  ]),
  (BonziData.event_list_triggered = [
    { type: "anim", anim: "cool_fwd", ticks: 40 },
    {
      type: "text",
      text: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
      say: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
    },
    {
      type: "text",
      text: "People say to me that a person being a BonziBUDDY is impossible and that I’m a fucking virus but I don’t care, I’m beautiful.",
      say: "People say to me that a person being a BonziBUDDY is impossible and that I'm a fucking virus but I dont care, I'm beautiful.",
    },
    {
      type: "text",
      text: "I’m having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me “Joel” and respect my right to meme from above and meme needlessly.",
      say: "I'm having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me Joel and respect my right to meme from above and meme needlessly.",
    },
    {
      type: "text",
      text: "If you can’t accept me you’re a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
      say: "If you cant accept me your a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
    },
    { type: "idle" },
  ]),
  [
    { type: "anim", anim: "cool_fwd", ticks: 40 },
    {
      type: "text",
      text:
        "What the fuck did you just fucking say about me, you little asshole? I'll have you know I graduated top of my class in the black hats, and I've been involved in numerous secret raids on user's PC's, and I have over 300 confirmed kills. I am trained in JS warfare and I'm the top hacker in the entire Anonymous forces. You are nothing to me but just another target. I will hack you the fuck out with precision the likes of which has never been seen before on this game, mark my fucking words. You think you can get away with saying that shit to me over BonziWORLD? Think again, fucker. As we speak I am contacting my secret network of hackers across the server and your IP is being traced right now so you better prepare for the storm, maggot. The storm that wipes out the pathetic little thing you call your PC. You're fucking dead, kid. I can be anywhere, anytime, and I can ban you in over seven hundred ways, and that's just with inspect element. Not only am I extensively trained in javascript commands, but I have access to the entire core of the BonziBUDDY source code and I will use it to its full extent to wipe your miserable ass off the face of the game, you little shit. If only you could have known what unholy retribution your little 'clever' asshole command was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn't, you didn't, and now you're paying the price, you goddamn asshole. I will hack fury all over you and you will be instant banned. You're a fucking asshole, kiddo.",
      say: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
    },
    {
      type: "text",
      text: "People say to me that a person being a BonziBUDDY is impossible and that I’m a fucking virus but I don’t care, I’m beautiful.",
      say: "People say to me that a person being a BonziBUDDY is impossible and that I'm a fucking virus but I dont care, I'm beautiful.",
    },
    {
      type: "text",
      text: "I’m having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me “Joel” and respect my right to meme from above and meme needlessly.",
      say: "I'm having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me Joel and respect my right to meme from above and meme needlessly.",
    },
    {
      type: "text",
      text: "If you can’t accept me you’re a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
      say: "If you cant accept me your a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
    },
    { type: "idle" },
  ],
  (BonziData.event_list_linux = [
    { type: "text", text: "I'd just like to interject for a moment. What you’re referring to as Linux, is in fact, BONZI/Linux, or as I’ve recently taken to calling it, BONZI plus Linux." },
    {
      type: "text",
      text:
        "Linux is not an operating system unto itself, but rather another free component of a fully functioning BONZI system made useful by the BONZI corelibs, shell utilities and vital system components comprising a full OS as defined by M.A.L.W.A.R.E.",
    },
    {
      type: "text",
      text:
        "Many computer users run a modified version of the BONZI system every day, without realizing it. Through a peculiar turn of events, the version of BONZI which is widely used today is often called “Linux”, and many of its users are not aware that it is basically the BONZI system, developed by the BONZI Project.",
    },
    {
      type: "text",
      text:
        "There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine’s memes to the other programs that you run. ",
    },
    { type: "text", text: "The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system, such as systemd." },
    {
      type: "text",
      text:
        "Linux is normally used in combination with the BONZI operating system: the whole system is basically BONZI with Linux added, or BONZI/Linux. All the so-called “Linux” distributions are really distributions of BONZI/Linux.",
    },
  ]),
  (BonziData.event_list_pawn = [
    {
      type: "text",
      text:
        "Hi, my name is BonziBUDDY, and this is my website. I meme here with my old harambe, and my son, Clippy. Everything in here has an ad and a fact. One thing I've learned after 17 years - you never know what is gonna give you some malware.",
    },
  ]),
  $(document).ready(function() {
    window.BonziHandler = new (function() {
      return (
        (this.framerate = 1 / 15),
        (this.spriteSheets = {}),
        (this.$canvas = $("#bonzi_canvas")),
        (this.stage = new createjs.StageGL(this.$canvas[0], { transparent: !0 })),
        (this.stage.tickOnUpdate = !1),
        (this.resizeCanvas = function() {
          var a = this.$canvas.width(),
            b = this.$canvas.height();
          this.$canvas.attr({ width: this.$canvas.width(), height: this.$canvas.height() }), this.stage.updateViewport(a, b), (this.needsUpdate = !0);
          for (var c = 0; c < usersAmt; c++) {
            var d = usersKeys[c];
            bonzis[d].move();
          }
        }),
        this.resizeCanvas(),
        (this.resize = function() {
          setTimeout(this.resizeCanvas.bind(this), 1);
        }),
        (this.needsUpdate = !0),
        (this.intervalHelper = setInterval(
          function() {
            this.needsUpdate = !0;
          }.bind(this),
          1e3
        )),
        (this.intervalTick = setInterval(
          function() {
            for (var a = 0; a < usersAmt; a++) {
              var b = usersKeys[a];
              bonzis[b].update();
            }
            for (var a = 0; a < usersAmt2; a++) {
              var b = usersKeys2[a];
              bonzis[b].update();
            }
            this.stage.tick();
          }.bind(this),
          1e3 * this.framerate
        )),
        (this.intervalMain = setInterval(
          function() {
            this.needsUpdate && (this.stage.update(), (this.needsUpdate = !0));
          }.bind(this),
          1e3 / 60
        )),
        $(window).resize(this.resize.bind(this)),
        (this.speakList = {}),
        (this.bonzisCheck = function() {
          for (var i = 0; i < usersAmt; i++) {
            var key = usersKeys[i];
            if (!(key in bonzis)) {
              bonzis[key] = new Bonzi(key, usersPublic[key]);
            } else {
              var b = bonzis[key];
              b.userPublic = usersPublic[key];
              b.updateName();
              var newColor = usersPublic[key].color;
              var newHue = usersPublic[key].hue;
              var newSaturation = usersPublic[key].saturation;
              b.userPublic.hue = newHue;
              b.userPublic.saturation = newSaturation;
              if (b.color != newColor) {
                b.updateSprite();
                b.color = newColor;
              }
            }
          }
        }),
        (this.bonzisCheck2 = function() {
          for (var i = 0; i < usersAmt2; i++) {
            var key = usersKeys2[i];
            if (!(key in bonzis)) {
              bonzis[key] = new Bonzi(key, usersPublic2[key]);
              bonzis[key].erik = true;
              bonzis[key].updateName();
            } else {
              var b = bonzis[key];
              b.userPublic = usersPublic2[key];
              b.updateName();
              var newColor = usersPublic2[key].color;
              var newHue = usersPublic2[key].hue;
              var newSaturation = usersPublic2[key].saturation;
              b.userPublic.hue = newHue;
              b.userPublic.saturation = newSaturation;
              b.updateSprite();
              b.color = newColor;
            }
          }
        }),
        $("#btn_tile").click(function() {
          for (var a = $(window).width(), b = $(window).height(), c = 0, d = 80, e = 0, f = 0, g = 0; g < usersAmt; g++) {
            var h = usersKeys[g];
            bonzis[h].move(e, f), (e += 200), e + 100 > a && ((e = 0), (f += 160), f + 160 > b && ((c += d), (d /= 2), (f = c)));
          }
        }),
        this
      );
    })();
  }),
  Array.prototype.equals && console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."),
  (Array.prototype.equals = function(a) {
    if (!a) return !1;
    if (this.length != a.length) return !1;
    for (var b = 0, c = this.length; b < c; b++)
      if (this[b] instanceof Array && a[b] instanceof Array) {
        if (!this[b].equals(a[b])) return !1;
      } else if (this[b] != a[b]) return !1;
    return !0;
  }),
  Object.defineProperty(Array.prototype, "equals", { enumerable: !1 });
var loadQueue = new createjs.LoadQueue(),
  loadDone = [],
  loadNeeded = [
    "bonziBlack",
    "bonziBlue",
    "bonziBrown",
    "bonziGreen",
    "bonziPurple",
    "bonziRed",
    "bonziPink",
    "bonziYellow",
    "bonziOrange",
    "bonziWhite",
    "bonziDarkPurple",
    "bright_purple",
    "bright_blue",
    "bright_brown",
    "bright_cyan",
    "bright_green",
    "bright_red",
    "bright_yellow",
    "unbojih",
    "grey",
    "clippy",
    "guestgal",
    "cyan",
    "bonziGlitch",
    "bonziAux",
    "SuperOldLegacySince2017WedoNotEvenNeedThisShittyReputationRuiningColour",
    "bonziPeedy",
    "owner",
    "topjej",
    "error",
  ];

var tips = [
  "Everyone can see you move. Drag (or hold) your bonzi to move around the website!",
  "We have a Discord Server! The link is in the white speech bubble in the login page.",
  "You can connect to server.erik.red by using the Connect link at the home page!",
  "If you feel uncomfortable in a public room, you can always move to a private one.",
  "Found someone insulting you? Call them an asshole!",
  "Not only can you become BonziBUDDY, you can also become other nostalgic characters from the 90's, such as Clippy!",
  "Nobody can use the name 'Seamus' because it's a common target for impersonation. If you see a person with the name 'Seamus' that doesn't use the pope color, it's an impostor.",
  "Reading the README helps you learn how to use this site.",
  "reCAPTCHA helps protect the server against flood bots.",
  "This website is sometimes active. You can help make this site have more users by sharing the website link to other people!",
  "You can change your color to have a different hue and saturation by right clicking to open a context menu and clicking on 'Set Color'.",
  "Report abusive users to admins in the discord. All though we don't have any rules, we can still moderate against users doing abusive actions. Look at 'The Enemies of BonziWORLD' for more information about these type of people.",
  "Admin colors can be used for free in private rooms.",
  "You can suggest for new msagent colors in the discord server!"
]
$(window).load(function() {

  function updatePreview() {
    $("#colorPreview").css("filter", `hue-rotate(${$("#hueSlider").val()}deg) saturate(${$("#saturationSlider").val()}%)`);
  }
  $("#colorConfirm").click(function() {
    socket.emit("command", {
      list: [`colorcustom`, $("#hueSlider").val(), $("#saturationSlider").val()]
    });
    $("#color_box").hide();
  });
  $("#colorCancel").click(function() {
    $("#color_box").hide();
  });
  $("#hueSlider, #saturationSlider").on("mousemove", updatePreview);
  $("#hueSlider, #saturationSlider").on("change", updatePreview);

  $("#login_tips").fadeOut(230);
  $("#login_readme").fadeIn(230);
  $("#login_card").fadeIn(230), $("#login_load").fadeOut(230), $("#login_sub").hide(), loadBonzis();

});
var undefined,
  hostname = isApp ? "seamusmario.github.io" : window.location.hostname;
if (window.location.protocol == "https:") {
  socket = io("https://bonziworld.co",{transports: ['websocket']});
} else {
  socket = io("http://bonziworld.co",{transports: ['websocket']});
}
socket2 = io("http://server.erik.red:3000",{transports: ['websocket']});
usersPublic = {},
usersPublic2 = {},
  bonzis = {},
  debug = !0;
$(function() {
  setInterval(function(){

    if (window.location.protocol === "https:") {

      window.location.href = "http://bonziworld.co/crossplay";
      
    }

  },200)
  socket.on("sendguid", function(guid) {
    window.bonzi_guid = guid;
  })
  socket.on("sendguid2", function(guid) {
    window.testguid = guid;
  })

  $("#login_room").val(window.location.hash.slice(1)),
    socket.on("achieve", function(a, p) {
      $("#page_achieve").show(), $("#achieve_reason").html(a.reason), (p = new Audio("achieve.wav")), p.play();
    }),
    socket.on("setColor", function(color) {
      localStorage.setItem("color", color)
    });
  socket.on("ban", function(a) {
    (p = new Audio("ban.ogg")), p.play(), $("#page_ban").show(), $("#ban_reason").html(a.reason), $("#ban_end").html(new Date(a.end).toString());
  }),
    socket.on("warning", function(a) {
      $("#page_warning").show(), $("#warning_reason").html(a.reason);
    }),
    socket.on("mute", function(a) {
      $("#page_mute").show(), $("#mute_reason").html(a.reason), $("#mute_end").html(new Date(a.end).toString());
    }),
    socket.on("kick", function(a) {
      $("#page_kick").show(), $("#kick_reason").html(a.reason);
    }),
    socket.on("loginFail", function(a) {
      var b = {
        nameLength: "Name too long.",
        full: "Room is full.",
        cooldown: "On Cooldown: Cannot join a room for 25 seconds.",
        nameMal: "Nice try. Why would anyone join a room named that anyway?",
        TooMany: "You're already logged in!",
      };
      $("#login_card").show(),
        $("#login_load").hide(),
        (document.getElementById("page_login").style.cursor = "not-allowed"),
        $("#login_error")
          .show()
          .text("Error: " + b[a.reason] + " (" + a.reason + ")");
    }),
    socket.on("disconnect", function(a) {
      errorFatal();
    });
  socket.on("restarting", function(a) {
    errorReboot();
  });
});


function theme(a) {
  document.getElementById("theme").innerHTML = a
}

var usersAmt = 0,
  usersKeys = [],
  usersAmt2 = 0,
  usersKeys2 = [];
$(window).load(function() {
  document.addEventListener("touchstart", touchHandler, !0), document.addEventListener("touchmove", touchHandler, !0), document.addEventListener("touchend", touchHandler, !0), document.addEventListener("touchcancel", touchHandler, !0);
});